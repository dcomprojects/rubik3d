{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/js/blah.js","app.js","app/js/main.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","createShader","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","main","canvas","vertexShaderSource","fragmentShaderSource","getContext","program","vertexShader","fragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","VERTEX_SHADER","FRAGMENT_SHADER","positionAttributeLocation","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","multiplier","width","clientWidth","height","clientHeight","resizeCanvasToDisplaySize","viewport","clearColor","clear","COLOR_BUFFER_BIT","useProgram","enableVertexAttribArray","FLOAT","offset","vertexAttribPointer","primitiveType","TRIANGLES","drawArrays","2","blah","Promise","resolve","reject","window","onload","then","document","querySelectorAll","./blah.js"],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* eslint no-console:0 consistent-return:0 */\n\"use strict\";\n\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n    multiplier = multiplier || 1;\n    const width  = canvas.clientWidth  * multiplier | 0;\n    const height = canvas.clientHeight * multiplier | 0;\n    if (canvas.width !== width ||  canvas.height !== height) {\n      canvas.width  = width;\n      canvas.height = height;\n      return true;\n    }\n    return false;\n  }\n\nfunction createShader(gl, type, source) {\n  var shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.log(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nfunction createProgram(gl, vertexShader, fragmentShader) {\n  var program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.log(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nfunction main(canvas, vertexShaderSource, fragmentShaderSource) {\n  // Get A WebGL context\n  //var canvas = document.querySelector(\"#c\");\n  var gl = canvas.getContext(\"webgl\");\n  if (!gl) {\n    return;\n  }\n\n  // Get the strings for our GLSL shaders\n  //var vertexShaderSource = document.querySelector(\"#vertex-shader-2d\").text;\n  //var fragmentShaderSource = document.querySelector(\"#fragment-shader-2d\").text;\n\n  // create GLSL shaders, upload the GLSL source, compile the shaders\n  var vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n  var fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n  // Link the two shaders into a program\n  var program = createProgram(gl, vertexShader, fragmentShader);\n\n  // look up where the vertex data needs to go.\n  var positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n\n  // Create a buffer and put three 2d clip space points in it\n  var positionBuffer = gl.createBuffer();\n\n  // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n  var positions = [\n    0, 0,\n    0, 0.5,\n    0.7, 0,\n  ];\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n  // code above this line is initialization code.\n  // code below this line is rendering code.\n\n  resizeCanvasToDisplaySize(gl.canvas);\n\n  // Tell WebGL how to convert from clip space to pixels\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n  // Clear the canvas\n  gl.clearColor(0, 0, 0, 0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  // Tell it to use our program (pair of shaders)\n  gl.useProgram(program);\n\n  // Turn on the attribute\n  gl.enableVertexAttribArray(positionAttributeLocation);\n\n  // Bind the position buffer.\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n  // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n  var size = 2;          // 2 components per iteration\n  var type = gl.FLOAT;   // the data is 32bit floats\n  var normalize = false; // don't normalize the data\n  var stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\n  var offset = 0;        // start at the beginning of the buffer\n  gl.vertexAttribPointer(\n      positionAttributeLocation, size, type, normalize, stride, offset);\n\n  // draw\n  var primitiveType = gl.TRIANGLES;\n  var offset = 0;\n  var count = 3;\n  gl.drawArrays(primitiveType, offset, count);\n}\n\nexports.main = main;",null,"\nconst blah = require(\"./blah.js\");\n\nconst vs = `\n// an attribute will receive data from a buffer\nattribute vec4 a_position;\n\n// all shaders have a main function\nvoid main() {\n\n  // gl_Position is a special variable a vertex shader\n  // is responsible for setting\n  gl_Position = a_position;\n}\n`;\n\nconst fs = `\n// fragment shaders don't have a default precision so we need\n// to pick one. mediump is a good default\nprecision mediump float;\n\nvoid main() {\n  // gl_FragColor is a special variable a fragment shader\n  // is responsible for setting\n  gl_FragColor = vec4(1, 0, 0.5, 1); // return redish-purple\n}\n`;\n\nconst onload = () => {\n    return new Promise(function (resolve, reject) {\n        window.onload = resolve;\n    });\n};\n\nonload().then(() => {\n    const canvas = document.querySelectorAll( \"#c\" );\n\n    blah.main(canvas[0], vs, fs);\n\n    console.log(canvas);\n});\n"]}
{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app2.js","app/js2/main.js","node_modules/three/build/three.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_typeof","obj","Symbol","iterator","constructor","prototype","THREE","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","desc","set","_interopRequireWildcard","WeakMap","Promise","resolve","reject","window","addEventListener","then","divCube","document","querySelector","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","renderer","WebGLRenderer","setSize","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","three","2","global","factory","this","EventDispatcher","undefined","Number","EPSILON","Math","pow","isInteger","value","isFinite","floor","sign","Function","toString","match","assign","target","TypeError","output","index","arguments","source","nextKey","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","l","_lut","_canvas","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","toUpperCase","clamp","min","max","euclideanModulo","m","mapLinear","a1","a2","b1","b2","lerp","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","b","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","console","warn","Vector2","Matrix3","elements","error","defineProperties","width","height","isVector2","setScalar","scalar","setX","setY","setComponent","getComponent","clone","copy","v","w","addVectors","addScalar","s","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","g","h","getInverse","matrix","throwOnDegenerate","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","sx","sy","cx","cy","scale","rotate","theta","translate","ImageUtils","getDataURL","image","test","src","HTMLCanvasElement","canvas","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","uuid","name","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","Quaternion","_x","_y","_z","_w","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","Array","isArray","dispose","transformUv","uv","isVector4","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","isWebGLRenderTarget","isWebGLMultisampleRenderTarget","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","multiplyQuaternionsFlat","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","update","isEuler","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","s$1","s$2","s$3","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","_vector","Vector3","_quaternion","isVector3","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","_v1","_m1","Matrix4","_zero","_one","isMatrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ce$1","cf$1","de$1","df$1","ae$1","af$1","be$1","bf$1","ac","ad","bc","bd","ac$1","ad$1","bc$1","bd$1","makeRotationFromQuaternion","compose","lookAt","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","x2","y2","z2","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","DefaultOrder","_order","Layers","mask","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","children","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","background","environment","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","updateWorldMatrix","isCamera","isLight","object","remove","attach","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","element","JSON","stringify","isInstancedMesh","count","instanceMatrix","isMesh","isLine","isPoints","parameters","shape","uuids","i$1","l$1","i$2","extractFromCache","shapes$1","values","data","recursive","parse","child","isScene","_points","_vector$1","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","satForAxes","axes","v0","extents","j","p0","p1","p2","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","boundingBox","computeBoundingBox","union","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","getBoundingSphere","intersect","_box$1","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","normalized","NAMES","il$1","materialId","Material","blending","side","flatShading","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","customProgramCacheKey","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","_vector2$1","BufferAttribute","itemSize","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","vertexUvs$1","morphTarget","j$1","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","drawRange","Infinity","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","attribute$1","attribute$2","attribute$3","lineDistancesNeedUpdate","attribute$4","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","isNaN","il$2","morphAttribute$1","jl","computeFaceNormals","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","cb","ab","vA","vB","vC","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","indices","array2","geometry2","newAttribute","name$1","morphArray","newAttribute$1","keys","key$1","attributeData","hasMorphAttributes","key$2","attributeArray","attributeData$1","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","isSkinnedMesh","boneTransform","intersection","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","a$1","b$1","c$1","group$1","groupMaterial$1","jl$1","i$3","il$3","isMultiMaterial","fl","faceMaterial","fvA","fvB","fvC","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","fromBufferGeometry","scope","addFace","areaWeighted","vl","f$1","fl$1","face$1","v$1","vl$1","f$2","fl$2","face$2","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","faceNormal$1","vertexNormals$1","f$3","fl$3","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","j$2","jl$2","uvsCopy","k","kl","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","uvs1","vertex","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","i$4","il$4","i$5","il$5","j$3","jl$3","srcVertexNormal","destVertexNormal","j$4","jl$4","i$6","il$6","i$7","il$7","i$8","il$8","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","__proto__","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","iy$1","ix$1","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","clear","stencil","WebGLCubeRenderTarget","dummy","DataTexture","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","fromEquirectangularTexture","shader","tEquirect","join","isDataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","UniformsLib","common","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","time","frame","stop","cancelAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","createBuffer","bindBuffer","bufferData","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","t2D","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","state","objects","planeMesh","boxMesh","clearColor","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","reset","resetDefaultState","setup","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","isInstancedBufferAttribute","buffer$1","type$1","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","buffergeometry","memory","updateWireframeAttribute","geometryIndex","geometryPosition","array$1","previousAttribute","_bufferGeometry","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","MAX_SAFE_INTEGER","morphInfluencesSum","influence$1","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","unit","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","split","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","isRawShaderMaterial","shaderName","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","deleteShader","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","nClipPlanes","nClipIntersection","isMeshStandardMaterial","bones","skeleton","nVertexUniforms","nVertexMatrices","allocateBones","shaderobject","getShaderObject","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","finish","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","onSceneDispose","list","cameras","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","uniforms$1","penumbra","shadow$1","shadowUniforms$1","isRectAreaLight","uniforms$2","isPointLight","uniforms$3","shadow$2","shadowUniforms$2","isHemisphereLight","uniforms$4","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","WebGLShadowMap","_renderer","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","isMeshDistanceMaterial","renderObject","shadowCamera","depthMaterial","depthMaterial$1","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","pars$1","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","setFlipSided","setCullFace","equationToGL","100","101","102","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","activeTexture","webglSlot","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","WebGLTextures","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","onTextureDispose","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","mipmapImage","mipmap$2","setTextureCubeDynamic","wrappingToGL","1000","1001","1002","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","samples$1","glInternalFormat$1","samples$2","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","createFramebuffer","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","Group","WebXRController","_targetRay","_grip","WebXRManager","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","onSessionEnd","forEach","disconnect","setFramebuffer","animation","isPresenting","onRequestReferenceSpace","updateInputSources","inputSources","removed","added","inputSource$1","controller$1","getController","getTargetRaySpace","getControllerGrip","getGripSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","getContextAttributes","xrCompatible","makeXRCompatible","layerInit","antialias","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","transform","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","pixelRatio","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","isMeshDepthMaterial","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","sortObjects","toneMappingExposure","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clipping","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","message","initGLContext","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","material2","initMaterial","projectObject","isGroup","isLOD","isImmediateRenderObject","geometry$1","material$1","renderObjects","isArrayCamera","camera2","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","ltc_1","LTC_1","ltc_2","LTC_2","opaqueObjects","transparentObjects","_webglFramebuffer","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","WebGL1Renderer","FogExp2","Fog","InterleavedBuffer","inputPose","gripPose","targetRay","grip","getPose","targetRaySpace","gripSpace","isInterleavedBuffer","arrayBuffers","_uuid","ib","_geometry","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","basePosition","skinIndex","skinWeight","_v1$4","_v2$2","LOD","_currentLevel","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getCurrentLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","weight","boneIndex","boneInverses","_offsetMatrix","_identityMatrix","Skeleton","Bone","bone","bone$1","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","lineDistances$1","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distance$1","nbVertices","distance$2","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","edge","edges","edge1","edge2","vertex$1","ol","edge1$1","edge2$1","key$3","e$1","position$1","l$2","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","EPS","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","inclination","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","num","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","hl","ahole","h$1","hl$1","ahole$1","concat","scalePt2","pt","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","h$2","hl$2","ahole$2","k$1","bs$1","vert","h$3","hl$3","ahole$3","vert$1","bs","vert$2","vert$3","t$1","z$1","bs$2","vert$4","h$4","hl$4","ahole$4","vert$5","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","layer","face$3","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","radiusStep","segment","thetaSegmentLevel","segment$1","LatheGeometry","segments","LatheBufferGeometry","inverseSegments","base","n1","n2","base$1","ShapeGeometry","ShapeBufferGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","shapeHole$1","l$3","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","x$1","cosTheta","sinTheta","x$2","slope","indexRow","y$1","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","loop","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceValue","startIndex","interpolant","createInterpolant","evaluate","resultBuffer","numTimes","valueStart","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","parseKeyframeTrack","json","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","giveUpAt$1","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","readOffset$1","writeOffset$1","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","m$1","animationKey","boneName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","requestHeader","load","loadAsync","setCrossOrigin","setPath","setResourcePath","setRequestHeader","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","cached","setTimeout","request","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","header","XMLHttpRequest","open","callbacks","callback$1","withCredentials","overrideMimeType","send","setResponseType","setWithCredentials","setMimeType","loaded","loadTexture","texDatas","mipmapCount","isCubemap","texData","onImageLoad","onImageError","substr","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","theta$1","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","SphericalHarmonics3","LightProbe","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","isSphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","arrayBuffer","getArrayBuffer","TYPED_ARRAYS","typedArray","bufferAttribute","typedArray$1","bufferAttribute$1","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","geometryShapes","bufferGeometryLoader","details","shape$1","loadImage","currentUrl","path$1","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","isImageBitmapLoader","setOptions","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sIdx$1","sLen$1","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","Date","now","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","filters","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","accumulateAdditive","weightAdditive","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","endIndex","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","Raycaster","PointCloud","ascSort","intersectObject","Spherical","Cylindrical","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","lastIndex$1","lastObject$1","bindingsForPath$1","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$7","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","_vector$8","SpotLightHelper","cone","coneLength","coneWidth","_vector$9","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","isSkeletonHelper","_vector$a","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","color$1","_v1$5","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$b","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","LOD_MAX","ENCODINGS","3000","3001","3002","3004","3005","3006","3007","_flatCamera","ref","_lodPlanes","_sizeLods","_sigmas","lod","sizeLod","sigma","texelSize","positionSize","uvSize","faceIndexSize","coordinates","fill","_createPlanes","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","weights","poleAxis","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","_compileMaterial","_isLDR","_createRenderTarget","cubeUVRenderTarget","_setViewport","_getEquirectShader","_getCubemapShader","ClosedSplineCurve3","SplineCurve3","Spline","fromScene","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","cubemap","compileCubemapShader","compileEquirectangularShader","outputTarget","_textureToCubeUV","tmpMesh","cubeCamera","upSign","forwardSign","maxComponent","fExp","log2","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","exp","outputSize","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","applyMatrix","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","maxInstancedCount","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","ACESFilmicToneMapping","AddEquation","AddOperation","AdditiveAnimationBlendMode","AdditiveBlending","AlphaFormat","AlwaysDepth","AlwaysStencilFunc","AxisHelper","BackSide","BasicDepthPacking","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","ByteType","CanvasRenderer","CineonToneMapping","CubeGeometry","CullFaceBack","CullFaceFront","CullFaceFrontBack","CullFaceNone","CustomBlending","CustomToneMapping","DecrementStencilOp","DecrementWrapStencilOp","DepthFormat","DepthStencilFormat","DoubleSide","DstAlphaFactor","DstColorFactor","DynamicBufferAttribute","DynamicCopyUsage","DynamicDrawUsage","DynamicReadUsage","EdgesHelper","EqualDepth","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","FloatType","FrontFaceDirectionCCW","FrontFaceDirectionCW","FrontSide","GammaEncoding","GreaterDepth","GreaterEqualDepth","GreaterEqualStencilFunc","GreaterStencilFunc","HalfFloatType","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","IntType","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","KeepStencilOp","LensFlare","LessDepth","LessEqualDepth","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearEncoding","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LinearToneMapping","LogLuvEncoding","LoopOnce","LoopPingPong","LoopRepeat","LuminanceAlphaFormat","LuminanceFormat","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MaxEquation","MeshFaceMaterial","MinEquation","MixOperation","MultiMaterial","MultiplyBlending","MultiplyOperation","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverDepth","NeverStencilFunc","NoBlending","NoColors","NoToneMapping","NormalAnimationBlendMode","NormalBlending","NotEqualDepth","NotEqualStencilFunc","ObjectSpaceNormalMap","OneFactor","OneMinusDstAlphaFactor","OneMinusDstColorFactor","OneMinusSrcAlphaFactor","OneMinusSrcColorFactor","PCFShadowMap","PCFSoftShadowMap","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","RGBADepthPacking","RGBAFormat","RGBAIntegerFormat","RGBA_ASTC_10x10_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGBDEncoding","RGBEEncoding","RGBEFormat","RGBFormat","RGBIntegerFormat","RGBM16Encoding","RGBM7Encoding","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_2BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","RGFormat","RGIntegerFormat","RedFormat","RedIntegerFormat","ReinhardToneMapping","ReplaceStencilOp","ReverseSubtractEquation","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","ShortType","SmoothShading","SrcAlphaFactor","SrcAlphaSaturateFactor","SrcColorFactor","StaticCopyUsage","StaticDrawUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","SubtractEquation","SubtractiveBlending","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TangentSpaceNormalMap","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","UnsignedByteType","UnsignedInt248Type","UnsignedIntType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedShortType","VSMShadowMap","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroCurvatureEnding","ZeroFactor","ZeroSlopeEnding","ZeroStencilOp","sRGBEncoding","define","amd","self"],"mappings":"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","file":"app2.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",null,"import * as THREE from 'three';\n\nconst onload = () => {\n    return new Promise(function (resolve, reject) {\n        window.addEventListener('load', resolve);\n    });\n};\n\nonload().then(() => {\nconst divCube = document.querySelector(\"div.cube\");\n\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera( 75, divCube.clientWidth/divCube.clientHeight, 0.1, 1000 );\n\nvar renderer = new THREE.WebGLRenderer();\nrenderer.setSize( divCube.clientWidth, divCube.clientHeight );\n\n\ndivCube.appendChild( renderer.domElement );\n\nvar geometry = new THREE.BoxGeometry( 1, 1, 1 );\nvar material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\nvar cube = new THREE.Mesh( geometry, material );\nscene.add( cube );\n\ncamera.position.z = 5;\n\nvar animate = function () {\n\trequestAnimationFrame( animate );\n\n\tcube.rotation.x += 0.01;\n\tcube.rotation.y += 0.01;\n\n\trenderer.render( scene, camera );\n};\n\nanimate();\n});","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t}\n\n\tvar REVISION = '118';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar CineonToneMapping = 3;\n\tvar ACESFilmicToneMapping = 4;\n\tvar CustomToneMapping = 5;\n\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar NormalAnimationBlendMode = 2500;\n\tvar AdditiveAnimationBlendMode = 2501;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return false; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author thezwap\n\t */\n\n\tvar _lut = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t}\n\n\tvar MathUtils = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t},\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tsetQuaternionFromProperEuler: function ( q, a, b, c, order ) {\n\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c2 = cos( b / 2 );\n\t\t\tvar s2 = sin( b / 2 );\n\n\t\t\tvar c13 = cos( ( a + c ) / 2 );\n\t\t\tvar s13 = sin( ( a + c ) / 2 );\n\n\t\t\tvar c1_3 = cos( ( a - c ) / 2 );\n\t\t\tvar s1_3 = sin( ( a - c ) / 2 );\n\n\t\t\tvar c3_1 = cos( ( c - a ) / 2 );\n\t\t\tvar s3_1 = sin( ( c - a ) / 2 );\n\n\t\t\tswitch ( order ) {\n\n\t\t\t\tcase 'XYX':\n\t\t\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZY':\n\t\t\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXZ':\n\t\t\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZX':\n\t\t\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXY':\n\t\t\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYZ':\n\t\t\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trandom: function () {\n\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp;\n\t\t\tvar m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t}\n\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t}\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\n\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY,\n\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t\treturn uv;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\t\tif ( w === void 0 ) w = 1;\n\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tObject.defineProperties( Vector4.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.z = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.w = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z; // variables for result\n\t\t\tvar epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trandom: function () {\n\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\n\t\tisWebGLMultisampleRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.samples = source.samples;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\t\tif ( w === void 0 ) w = 1;\n\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\t\tvar x1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t},\n\n\t\tmultiplyQuaternionsFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\t\tvar x0 = src0[ srcOffset0 ];\n\t\t\tvar y0 = src0[ srcOffset0 + 1 ];\n\t\t\tvar z0 = src0[ srcOffset0 + 2 ];\n\t\t\tvar w0 = src0[ srcOffset0 + 3 ];\n\n\t\t\tvar x1 = src1[ srcOffset1 ];\n\t\t\tvar y1 = src1[ srcOffset1 + 1 ];\n\t\t\tvar z1 = src1[ srcOffset1 + 2 ];\n\t\t\tvar w1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\t\treturn dst;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tisQuaternion: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tswitch ( order ) {\n\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\tvar s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\tvar s$1 = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s$1;\n\t\t\t\tthis._x = 0.25 * s$1;\n\t\t\t\tthis._y = ( m12 + m21 ) / s$1;\n\t\t\t\tthis._z = ( m13 + m31 ) / s$1;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\tvar s$2 = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s$2;\n\t\t\t\tthis._x = ( m12 + m21 ) / s$2;\n\t\t\t\tthis._y = 0.25 * s$2;\n\t\t\t\tthis._z = ( m23 + m32 ) / s$2;\n\n\t\t\t} else {\n\n\t\t\t\tvar s$3 = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s$3;\n\t\t\t\tthis._x = ( m13 + m31 ) / s$3;\n\t\t\t\tthis._y = ( m23 + m32 ) / s$3;\n\t\t\t\tthis._z = 0.25 * s$3;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) { return this; }\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) { return this; }\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\tthis.normalize();\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index ) {\n\n\t\t\tthis._x = attribute.getX( index );\n\t\t\tthis._y = attribute.getY( index );\n\t\t\tthis._z = attribute.getZ( index );\n\t\t\tthis._w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector = new Vector3();\n\tvar _quaternion = new Quaternion();\n\n\tfunction Vector3( x, y, z ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t\t},\n\n\t\tapplyAxisAngle: function ( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\treturn this.applyMatrix3( m ).normalize();\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( v ) {\n\n\t\t\tvar denominator = v.lengthSq();\n\n\t\t\tif ( denominator === 0 ) { return this.set( 0, 0, 0 ); }\n\n\t\t\tvar scalar = v.dot( this ) / denominator;\n\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function ( planeNormal ) {\n\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( _vector );\n\n\t\t},\n\n\t\treflect: function ( normal ) {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t},\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\t\tif ( denominator === 0 ) { return Math.PI / 2; }\n\n\t\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tsetFromMatrix3Column: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trandom: function () {\n\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar _v1 = new Vector3();\n\tvar _m1 = new Matrix4();\n\tvar _zero = new Vector3( 0, 0, 0 );\n\tvar _one = new Vector3( 1, 1, 1 );\n\tvar _x = new Vector3();\n\tvar _y = new Vector3();\n\tvar _z = new Vector3();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function ( m ) {\n\n\t\t\t// this method does not support reflection matrices\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce$1 = c * e, cf$1 = c * f, de$1 = d * e, df$1 = d * f;\n\n\t\t\t\tte[ 0 ] = ce$1 - df$1 * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de$1 + cf$1 * b;\n\n\t\t\t\tte[ 1 ] = cf$1 + de$1 * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df$1 - ce$1 * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae$1 = a * e, af$1 = a * f, be$1 = b * e, bf$1 = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be$1 * d - af$1;\n\t\t\t\tte[ 8 ] = ae$1 * d + bf$1;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf$1 * d + ae$1;\n\t\t\t\tte[ 9 ] = af$1 * d - be$1;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac$1 = a * c, ad$1 = a * d, bc$1 = b * c, bd$1 = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac$1 * f + bd$1;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad$1 * f - bc$1;\n\n\t\t\t\tte[ 2 ] = bc$1 * f - ad$1;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd$1 * f + ac$1;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\treturn this.compose( _zero, q, _one );\n\n\t\t},\n\n\t\tlookAt: function ( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors( eye, target );\n\n\t\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t_z.z = 1;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t_z.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_z.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\t\t\t\t_x.crossVectors( up, _z );\n\n\t\t\t}\n\n\t\t\t_x.normalize();\n\t\t\t_y.crossVectors( _z, _x );\n\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( x, y, z ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tte[ 12 ] = x.x;\n\t\t\t\tte[ 13 ] = x.y;\n\t\t\t\tte[ 14 ] = x.z;\n\n\t\t\t} else {\n\n\t\t\t\tte[ 12 ] = x;\n\t\t\t\tte[ 13 ] = y;\n\t\t\t\tte[ 14 ] = z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t\t}\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = position.x;\n\t\t\tte[ 13 ] = position.y;\n\t\t\tte[ 14 ] = position.z;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) { sx = - sx; }\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\t_m1.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t_m1.elements[ 0 ] *= invSX;\n\t\t\t_m1.elements[ 1 ] *= invSX;\n\t\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t\t_m1.elements[ 4 ] *= invSY;\n\t\t\t_m1.elements[ 5 ] *= invSY;\n\t\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _matrix = new Matrix4();\n\tvar _quaternion$1 = new Quaternion();\n\n\tfunction Euler( x, y, z, order ) {\n\t\tif ( x === void 0 ) x = 0;\n\t\tif ( y === void 0 ) y = 0;\n\t\tif ( z === void 0 ) z = 0;\n\t\tif ( order === void 0 ) order = Euler.DefaultOrder;\n\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = MathUtils.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tswitch ( order ) {\n\n\t\t\t\tcase 'XYZ':\n\n\t\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\n\t\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\n\t\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\n\t\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\n\t\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\n\t\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t\t},\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function ( newOrder ) {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\t_quaternion$1.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t\t},\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\tenableAll: function () {\n\n\t\t\tthis.mask = 0xffffffff | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\tdisableAll: function () {\n\n\t\t\tthis.mask = 0;\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\tvar _object3DId = 0;\n\n\tvar _v1$1 = new Vector3();\n\tvar _q1 = new Quaternion();\n\tvar _m1$1 = new Matrix4();\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\tvar _scale = new Vector3();\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3( 1, 0, 0 );\n\tvar _yAxis = new Vector3( 0, 1, 0 );\n\tvar _zAxis = new Vector3( 0, 0, 1 );\n\n\tvar _addedEvent = { type: 'added' };\n\tvar _removedEvent = { type: 'removed' };\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tthis.matrix.premultiply( matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t\t},\n\n\t\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslateX: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t\t},\n\n\t\ttranslateY: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t\t},\n\n\t\ttranslateZ: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t\t},\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t\t},\n\n\t\tlookAt: function ( x, y, z ) {\n\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t_target.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\t_target.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t\t} else {\n\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t\t}\n\n\t\t},\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push( object );\n\n\t\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tattach: function ( object ) {\n\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t\t}\n\n\t\t\tobject.applyMatrix4( _m1$1 );\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) { return this; }\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldScale: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) { return; }\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t\t}\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tif ( updateChildren === true ) {\n\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\n\t\t\tif ( this.visible === false ) { object.visible = false; }\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\n\n\t\t\t// object specific properties\n\n\t\t\tif ( this.isInstancedMesh ) {\n\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i$1 = 0, l$1 = this.material.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i$1 ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i$2 = 0; i$2 < this.children.length; i$2 ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i$2 ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes$1 = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\n\t\t\t\tif ( shapes$1.length > 0 ) { output.shapes = shapes$1; }\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) { recursive = true; }\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tisScene: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\n\t\t\tif ( source.environment !== null ) { this.environment = source.environment.clone(); }\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\n\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\n\t\t\tif ( this.environment !== null ) { data.object.environment = this.environment.toJSON( meta ); }\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar _points = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\n\tvar _vector$1 = new Vector3();\n\n\tvar _box = new Box3();\n\n\t// triangle centered vertices\n\n\tvar _v0 = new Vector3();\n\tvar _v1$2 = new Vector3();\n\tvar _v2 = new Vector3();\n\n\t// triangle edge vectors\n\n\tvar _f0 = new Vector3();\n\tvar _f1 = new Vector3();\n\tvar _f2 = new Vector3();\n\n\tvar _center = new Vector3();\n\tvar _extents = new Vector3();\n\tvar _triangleNormal = new Vector3();\n\tvar _testAxis = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function ( object ) {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box );\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, _vector$1 );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: function ( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( _center );\n\t\t\t_extents.subVectors( this.max, _center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\t_v0.subVectors( triangle.a, _center );\n\t\t\t_v1$2.subVectors( triangle.b, _center );\n\t\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\t_f0.subVectors( _v1$2, _v0 );\n\t\t\t_f1.subVectors( _v2, _v1$2 );\n\t\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );\n\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tgetBoundingSphere: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$1 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) { return this; }\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\tthis.setFromPoints( _points );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\t\tfor ( var i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t_testAxis.fromArray( axes, i );\n\t\t\t// project the aabb onto the seperating axis\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\tvar p0 = v0.dot( _testAxis );\n\t\t\tvar p1 = v1.dot( _testAxis );\n\t\t\tvar p2 = v2.dot( _testAxis );\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tvar _box$1 = new Box3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : - 1;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\treturn ( this.radius < 0 );\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.center.set( 0, 0, 0 );\n\t\t\tthis.radius = - 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\tvar _vector$2 = new Vector3();\n\tvar _segCenter = new Vector3();\n\tvar _segDir = new Vector3();\n\tvar _diff = new Vector3();\n\n\tvar _edge1 = new Vector3();\n\tvar _edge2 = new Vector3();\n\tvar _normal = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, _vector$2 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function ( point ) {\n\n\t\t\tvar directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\t_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn _vector$2.distanceToSquared( point );\n\n\t\t},\n\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( _segDir );\n\t\t\tvar b0 = _diff.dot( this.direction );\n\t\t\tvar b1 = - _diff.dot( _segDir );\n\t\t\tvar c = _diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t},\n\n\t\tintersectSphere: function ( sphere, target ) {\n\n\t\t\t_vector$2.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = _vector$2.dot( this.direction );\n\t\t\tvar d2 = _vector$2.dot( _vector$2 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) { return null; }\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) { return null; }\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn this.intersectBox( box, _vector$2 ) !== null;\n\n\t\t},\n\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t_edge1.subVectors( b, a );\n\t\t\t_edge2.subVectors( c, a );\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( _normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) { return null; }\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t_diff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector1 = new Vector3();\n\tvar _vector2 = new Vector3();\n\tvar _normalMatrix = new Matrix3();\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tisPlane: true,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\n\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function ( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( _vector1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t},\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v0$1 = new Vector3();\n\tvar _v1$3 = new Vector3();\n\tvar _v2$1 = new Vector3();\n\tvar _v3 = new Vector3();\n\n\tvar _vab = new Vector3();\n\tvar _vac = new Vector3();\n\tvar _vbc = new Vector3();\n\tvar _vap = new Vector3();\n\tvar _vbp = new Vector3();\n\tvar _vcp = new Vector3();\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function ( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\t_v0$1.subVectors( a, b );\n\t\t\ttarget.cross( _v0$1 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t},\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t\t_v0$1.subVectors( c, a );\n\t\t\t_v1$3.subVectors( b, a );\n\t\t\t_v2$1.subVectors( point, a );\n\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t\t},\n\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\t\ttarget.set( 0, 0 );\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t\t_v0$1.subVectors( c, b );\n\t\t\t_v1$3.subVectors( a, b );\n\n\t\t\t// strictly front facing\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\t_v0$1.subVectors( this.c, this.b );\n\t\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t\t},\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Plane();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tisFrontFacing: function ( direction ) {\n\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( p, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\tvar v, w;\n\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors( b, a );\n\t\t\t_vac.subVectors( c, a );\n\t\t\t_vap.subVectors( p, a );\n\t\t\tvar d1 = _vab.dot( _vap );\n\t\t\tvar d2 = _vac.dot( _vap );\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy( a );\n\n\t\t\t}\n\n\t\t\t_vbp.subVectors( p, b );\n\t\t\tvar d3 = _vab.dot( _vbp );\n\t\t\tvar d4 = _vac.dot( _vbp );\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy( b );\n\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t\t}\n\n\t\t\t_vcp.subVectors( p, c );\n\t\t\tvar d5 = _vab.dot( _vcp );\n\t\t\tvar d6 = _vac.dot( _vcp );\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy( c );\n\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t_vbc.subVectors( c, b );\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t\t}\n\n\t\t\t// face region\n\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t// u = va * denom\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t\t},\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tvar _hslA = { h: 0, s: 0, l: 0 };\n\tvar _hslB = { h: 0, s: 0, l: 0 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tfunction hue2rgb( p, q, t ) {\n\n\t\tif ( t < 0 ) { t += 1; }\n\t\tif ( t > 1 ) { t -= 1; }\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\n\t\tif ( t < 1 / 2 ) { return q; }\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\n\t\treturn p;\n\n\t}\n\n\tfunction SRGBToLinear( c ) {\n\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t}\n\n\tfunction LinearToSRGB( c ) {\n\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function ( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo( h, 1 );\n\t\t\ts = MathUtils.clamp( s, 0, 1 );\n\t\t\tl = MathUtils.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) { return; }\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\treturn this.setColorName( style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorName: function ( style ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function ( color ) {\n\n\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToSRGB: function ( color ) {\n\n\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tthis.getHSL( _hslA );\n\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function ( color, alpha ) {\n\n\t\t\tthis.getHSL( _hslA );\n\t\t\tcolor.getHSL( _hslB );\n\n\t\t\tvar h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );\n\t\t\tvar s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );\n\t\t\tvar l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\t\tthis.setHSL( h, s, l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index ) {\n\n\t\t\tthis.r = attribute.getX( index );\n\t\t\tthis.g = attribute.getY( index );\n\t\t\tthis.b = attribute.getZ( index );\n\n\t\t\tif ( attribute.normalized === true ) {\n\n\t\t\t\t// assuming Uint8Array\n\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\tColor.NAMES = _colorKeywords;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i$1 = 0, il$1 = source.vertexColors.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tthis.vertexColors[ i$1 ] = source.vertexColors[ i$1 ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function ( /* shaderobject, renderer */ ) {},\n\n\t\tcustomProgramCacheKey: function () {\n\n\t\t\treturn this.onBeforeCompile.toString();\n\n\t\t},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) { return; }\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\n\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\n\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\n\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\n\n\t\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\n\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\n\t\t\tif ( this.vertexColors ) { data.vertexColors = true; }\n\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\n\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\n\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\n\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\n\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\n\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\n\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\n\n\t\t\tif ( this.visible === false ) { data.visible = false; }\n\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\n\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\t\tvar srcPlanes = source.clippingPlanes;\n\t\t\tvar dstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.toneMapped = source.toneMapped;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _vector$3 = new Vector3();\n\tvar _vector2$1 = new Vector2();\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tif ( this.itemSize === 2 ) {\n\n\t\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\t\tfor ( var i$1 = 0, l$1 = this.count; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\t\t_vector$3.fromBufferAttribute( this, i$1 );\n\t\t\t\t\t_vector$3.applyMatrix3( m );\n\n\t\t\t\t\tthis.setXYZ( i$1, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyNormalMatrix( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.transformDirection( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar groups = [];\n\n\t\t\tvar group, i;\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < morphNormalsLength; i$1 ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i$1 ] = {\n\t\t\t\t\t\tname: morphNormals[ i$1 ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i$2 = 0; i$2 < faces.length; i$2 ++ ) {\n\n\t\t\t\tvar face = faces[ i$2 ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i$2 ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i$2 );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs$1 = faceVertexUvs[ 1 ][ i$2 ];\n\n\t\t\t\t\tif ( vertexUvs$1 !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs$1[ 0 ], vertexUvs$1[ 1 ], vertexUvs$1[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i$2 );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j$1 = 0; j$1 < morphNormalsLength; j$1 ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j$1 ].vertexNormals[ i$2 ];\n\n\t\t\t\t\tmorphTargetsNormal[ j$1 ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) { return - Infinity; }\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\tvar _obj = new Object3D();\n\tvar _offset = new Vector3();\n\tvar _box$2 = new Box3();\n\tvar _boxMorphTargets = new Box3();\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tsetAttribute: function ( name, attribute ) {\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeleteAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif ( tangent !== undefined ) {\n\n\t\t\t\ttangent.transformDirection( matrix );\n\n\t\t\t\ttangent.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$2.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$2.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$2.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$2.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj.lookAt( vector );\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tvar attribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tvar attribute$1 = this.attributes.normal;\n\n\t\t\t\tif ( attribute$1 !== undefined ) {\n\n\t\t\t\t\tattribute$1.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute$1.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tvar attribute$2 = this.attributes.color;\n\n\t\t\t\tif ( attribute$2 !== undefined ) {\n\n\t\t\t\t\tattribute$2.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute$2.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tvar attribute$3 = this.attributes.uv;\n\n\t\t\t\tif ( attribute$3 !== undefined ) {\n\n\t\t\t\t\tattribute$3.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute$3.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tvar attribute$4 = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute$4 !== undefined ) {\n\n\t\t\t\t\tattribute$4.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute$4.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\t// first, find the center of the bounding sphere\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter( center );\n\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i$1 = 0, il$1 = position.count; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i$1 );\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i$2 = 0, il$2 = morphAttributesPosition.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute$1 = morphAttributesPosition[ i$2 ];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute$1.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute$1, j );\n\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar positionAttribute = this.getAttribute( 'position' );\n\n\t\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\t\tvar normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tfor ( var i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tfor ( var i$1 = 0, il$1 = index.count; i$1 < il$1; i$1 += 3 ) {\n\n\t\t\t\t\t\tvar vA = index.getX( i$1 + 0 );\n\t\t\t\t\t\tvar vB = index.getX( i$1 + 1 );\n\t\t\t\t\t\tvar vC = index.getX( i$1 + 2 );\n\n\t\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\t\tnA.add( cb );\n\t\t\t\t\t\tnB.add( cb );\n\t\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i$2 = 0, il$2 = positionAttribute.count; i$2 < il$2; i$2 += 3 ) {\n\n\t\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i$2 + 0 );\n\t\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i$2 + 1 );\n\t\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i$2 + 2 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormalAttribute.setXYZ( i$2 + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( i$2 + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\t\tnormalAttribute.setXYZ( i$2 + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.fromBufferAttribute( normals, i );\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\tvar normalized = attribute.normalized;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\t// attributes\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor ( var name$1 in morphAttributes ) {\n\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name$1 ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute$1 = morphAttribute[ i ];\n\n\t\t\t\t\tvar newAttribute$1 = convertBufferAttribute( attribute$1, indices );\n\n\t\t\t\t\tmorphArray.push( newAttribute$1 );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[ name$1 ] = morphArray;\n\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i$1 = 0, l = groups.length; i$1 < l; i$1 ++ ) {\n\n\t\t\t\tvar group = groups[ i$1 ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key$1 in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key$1 ];\n\n\t\t\t\tvar attributeData = attribute.toJSON( data.data );\n\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\tdata.data.attributes[ key$1 ] = attributeData;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor ( var key$2 in this.morphAttributes ) {\n\n\t\t\t\tvar attributeArray = this.morphAttributes[ key$2 ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute$1 = attributeArray[ i ];\n\n\t\t\t\t\tvar attributeData$1 = attribute$1.toJSON( data.data );\n\n\t\t\t\t\tif ( attribute$1.name !== '' ) { attributeData$1.name = attribute$1.name; }\n\n\t\t\t\t\tarray.push( attributeData$1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\t\tmorphAttributes[ key$2 ] = array;\n\n\t\t\t\t\thasMorphAttributes = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphAttributes ) {\n\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t const parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t const values = [];\n\n\t\t\t for ( const key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// used for storing cloned, shared data\n\n\t\t\tvar data = {};\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( var name$1 in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name$1 ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name$1 ] = array;\n\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( var i$1 = 0, l$1 = groups.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\tvar group = groups[ i$1 ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tvar _inverseMatrix = new Matrix4();\n\tvar _ray = new Ray();\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\tvar _vB = new Vector3();\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\tvar _tempB = new Vector3();\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\tvar _morphB = new Vector3();\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\tvar _uvB = new Vector2();\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tvar name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) { return; }\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere.copy( geometry.boundingSphere );\n\t\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tvar start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tvar end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( var j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\tvar a = index.getX( j );\n\t\t\t\t\t\t\t\tvar b = index.getX( j + 1 );\n\t\t\t\t\t\t\t\tvar c = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar start$1 = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tvar end$1 = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( var i$1 = start$1, il$1 = end$1; i$1 < il$1; i$1 += 3 ) {\n\n\t\t\t\t\t\t\tvar a$1 = index.getX( i$1 );\n\t\t\t\t\t\t\tvar b$1 = index.getX( i$1 + 1 );\n\t\t\t\t\t\t\tvar c$1 = index.getX( i$1 + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$1, b$1, c$1 );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i$1 / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( var i$2 = 0, il$2 = groups.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\t\t\tvar group$1 = groups[ i$2 ];\n\t\t\t\t\t\t\tvar groupMaterial$1 = material[ group$1.materialIndex ];\n\n\t\t\t\t\t\t\tvar start$2 = Math.max( group$1.start, drawRange.start );\n\t\t\t\t\t\t\tvar end$2 = Math.min( ( group$1.start + group$1.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( var j$1 = start$2, jl$1 = end$2; j$1 < jl$1; j$1 += 3 ) {\n\n\t\t\t\t\t\t\t\tvar a$2 = j$1;\n\t\t\t\t\t\t\t\tvar b$2 = j$1 + 1;\n\t\t\t\t\t\t\t\tvar c$2 = j$1 + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial$1, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$2, b$2, c$2 );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j$1 / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group$1.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar start$3 = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tvar end$3 = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( var i$3 = start$3, il$3 = end$3; i$3 < il$3; i$3 += 3 ) {\n\n\t\t\t\t\t\t\tvar a$3 = i$3;\n\t\t\t\t\t\t\tvar b$3 = i$3 + 1;\n\t\t\t\t\t\t\tvar c$3 = i$3 + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a$3, b$3, c$3 );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i$3 / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\n\n\t\t\t\t\tvar fvA = vertices[ face.a ];\n\t\t\t\t\tvar fvB = vertices[ face.b ];\n\t\t\t\t\tvar fvC = vertices[ face.c ];\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\tvar intersect;\n\n\t\tif ( material.side === BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) { return null; }\n\n\t\t_intersectionPointWorld.copy( point );\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tvar influence = morphInfluences[ i ];\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) { continue; }\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.boneTransform( a, _vA );\n\t\t\tobject.boneTransform( b, _vB );\n\t\t\tobject.boneTransform( c, _vC );\n\n\t\t}\n\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv2 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tvar face = new Face3( a, b, c );\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\tvar _m1$3 = new Matrix4();\n\tvar _obj$1 = new Object3D();\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.faces.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tvar face = this.faces[ i$1 ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$3.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$3.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$3.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$3.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj$1.lookAt( vector );\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj$1.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar index = geometry.index !== null ? geometry.index : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( attributes.position === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar position = attributes.position;\n\t\t\tvar normal = attributes.normal;\n\t\t\tvar color = attributes.color;\n\t\t\tvar uv = attributes.uv;\n\t\t\tvar uv2 = attributes.uv2;\n\n\t\t\tif ( uv2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\n\n\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\tscope.vertices.push( new Vector3().fromBufferAttribute( position, i ) );\n\n\t\t\t\tif ( color !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color().fromBufferAttribute( color, i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexColors = ( color === undefined ) ? [] : [\n\t\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\t\tscope.colors[ c ].clone()\n\t\t\t\t];\n\n\t\t\t\tvar vertexNormals = ( normal === undefined ) ? [] : [\n\t\t\t\t\tnew Vector3().fromBufferAttribute( normal, a ),\n\t\t\t\t\tnew Vector3().fromBufferAttribute( normal, b ),\n\t\t\t\t\tnew Vector3().fromBufferAttribute( normal, c )\n\t\t\t\t];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uv !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, a ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, b ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, c )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, a ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, b ),\n\t\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, c )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < groups.length; i$1 ++ ) {\n\n\t\t\t\t\tvar group = groups[ i$1 ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( index.getX( j ), index.getX( j + 1 ), index.getX( j + 2 ), group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tfor ( var i$2 = 0; i$2 < index.count; i$2 += 3 ) {\n\n\t\t\t\t\t\taddFace( index.getX( i$2 ), index.getX( i$2 + 1 ), index.getX( i$2 + 2 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i$3 = 0; i$3 < position.count; i$3 += 3 ) {\n\n\t\t\t\t\t\taddFace( i$3, i$3 + 1, i$3 + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\n\n\t\t\tvar vertices = new Array( this.vertices.length );\n\n\t\t\tfor ( var v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( var f$1 = 0, fl$1 = this.faces.length; f$1 < fl$1; f$1 ++ ) {\n\n\t\t\t\t\tvar face$1 = this.faces[ f$1 ];\n\n\t\t\t\t\tvertices[ face$1.a ].add( face$1.normal );\n\t\t\t\t\tvertices[ face$1.b ].add( face$1.normal );\n\t\t\t\t\tvertices[ face$1.c ].add( face$1.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var v$1 = 0, vl$1 = this.vertices.length; v$1 < vl$1; v$1 ++ ) {\n\n\t\t\t\tvertices[ v$1 ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var f$2 = 0, fl$2 = this.faces.length; f$2 < fl$2; f$2 ++ ) {\n\n\t\t\t\tvar face$2 = this.faces[ f$2 ];\n\n\t\t\t\tvar vertexNormals = face$2.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face$2.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face$2.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face$2.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face$2.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face$2.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face$2.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\n\n\t\t\t\tfor ( var i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.morphTargets.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i$1 ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i$1 ] = {};\n\t\t\t\t\tthis.morphNormals[ i$1 ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i$1 ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i$1 ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i$1 ].vertexNormals;\n\n\t\t\t\t\tfor ( var f$1 = 0, fl$1 = this.faces.length; f$1 < fl$1; f$1 ++ ) {\n\n\t\t\t\t\t\tvar faceNormal = new Vector3();\n\t\t\t\t\t\tvar vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i$1 ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i$1 ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tfor ( var f$2 = 0, fl$2 = this.faces.length; f$2 < fl$2; f$2 ++ ) {\n\n\t\t\t\t\tvar face$1 = this.faces[ f$2 ];\n\n\t\t\t\t\tvar faceNormal$1 = morphNormals.faceNormals[ f$2 ];\n\t\t\t\t\tvar vertexNormals$1 = morphNormals.vertexNormals[ f$2 ];\n\n\t\t\t\t\tfaceNormal$1.copy( face$1.normal );\n\n\t\t\t\t\tvertexNormals$1.a.copy( face$1.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals$1.b.copy( face$1.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals$1.c.copy( face$1.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( var f$3 = 0, fl$3 = this.faces.length; f$3 < fl$3; f$3 ++ ) {\n\n\t\t\t\tvar face$2 = this.faces[ f$3 ];\n\n\t\t\t\tface$2.normal = face$2.__originalFaceNormal;\n\t\t\t\tface$2.vertexNormals = face$2.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i$1 = 0, il$1 = colors2.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i$1 ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( var i$2 = 0, il$2 = faces2.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\tvar face = faces2[ i$2 ], faceCopy = (void 0), normal = (void 0), color = (void 0),\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j$1 = 0, jl$1 = faceVertexColors.length; j$1 < jl$1; j$1 ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j$1 ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( var i$3 = 0, il$3 = geometry.faceVertexUvs.length; i$3 < il$3; i$3 ++ ) {\n\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i$3 ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i$3 ] === undefined ) { this.faceVertexUvs[ i$3 ] = []; }\n\n\t\t\t\tfor ( var j$2 = 0, jl$2 = faceVertexUvs2.length; j$2 < jl$2; j$2 ++ ) {\n\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j$2 ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i$3 ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar v = this.vertices[ i ];\n\t\t\t\tvar key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.faces.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tvar face = this.faces[ i$1 ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tvar indices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i$1 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i$2 = faceIndicesToRemove.length - 1; i$2 >= 0; i$2 -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i$2 ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( var j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\n\n\t\t\tfor ( var i$1 = 0; i$1 < length; i$1 ++ ) {\n\n\t\t\t\tvar id = faces[ i$1 ]._id;\n\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i$1 = 0; i$1 < this.faces.length; i$1 ++ ) {\n\n\t\t\t\tvar face = this.faces[ i$1 ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i$1 ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i$1 ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t const parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t const values = [];\n\n\t\t\t for ( const key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( var i$1 = 0, il$1 = colors.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i$1 ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( var i$2 = 0, il$2 = faces.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i$2 ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( var i$3 = 0, il$3 = source.faceVertexUvs.length; i$3 < il$3; i$3 ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i$3 ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i$3 ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i$3 ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i$3 ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( var i$4 = 0, il$4 = morphTargets.length; i$4 < il$4; i$4 ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i$4 ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i$4 ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( var j$1 = 0, jl$1 = morphTargets[ i$4 ].vertices.length; j$1 < jl$1; j$1 ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i$4 ].vertices[ j$1 ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i$4 ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( var j$2 = 0, jl$2 = morphTargets[ i$4 ].normals.length; j$2 < jl$2; j$2 ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i$4 ].normals[ j$2 ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( var i$5 = 0, il$5 = morphNormals.length; i$5 < il$5; i$5 ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i$5 ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( var j$3 = 0, jl$3 = morphNormals[ i$5 ].vertexNormals.length; j$3 < jl$3; j$3 ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i$5 ].vertexNormals[ j$3 ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i$5 ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( var j$4 = 0, jl$4 = morphNormals[ i$5 ].faceNormals.length; j$4 < jl$4; j$4 ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i$5 ].faceNormals[ j$4 ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( var i$6 = 0, il$6 = skinWeights.length; i$6 < il$6; i$6 ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i$6 ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( var i$7 = 0, il$7 = skinIndices.length; i$7 < il$7; i$7 ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i$7 ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( var i$8 = 0, il$8 = lineDistances.length; i$8 < il$8; i$8 ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i$8 ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'BoxGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t\treturn BoxGeometry;\n\t}(Geometry));\n\n\t// BoxBufferGeometry\n\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'BoxBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\t\t\tdepth = depth || 1;\n\n\t\t\t// segments\n\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// build each side of the box geometry\n\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar vector = new Vector3();\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// uvs\n\n\t\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t\t// counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// indices\n\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\t\tfor ( var iy$1 = 0; iy$1 < gridY; iy$1 ++ ) {\n\n\t\t\t\t\tfor ( var ix$1 = 0; ix$1 < gridX; ix$1 ++ ) {\n\n\t\t\t\t\t\tvar a = numberOfVertices + ix$1 + gridX1 * iy$1;\n\t\t\t\t\t\tvar b = numberOfVertices + ix$1 + gridX1 * ( iy$1 + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix$1 + 1 ) + gridX1 * ( iy$1 + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix$1 + 1 ) + gridX1 * iy$1;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t\t// update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry));\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tfunction cloneUniforms( src ) {\n\n\t\tvar dst = {};\n\n\t\tfor ( var u in src ) {\n\n\t\t\tdst[ u ] = {};\n\n\t\t\tfor ( var p in src[ u ] ) {\n\n\t\t\t\tvar property = src[ u ][ p ];\n\n\t\t\t\tif ( property && ( property.isColor ||\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dst;\n\n\t}\n\n\tfunction mergeUniforms( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t}\n\n\t// Legacy\n\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tvar extensions = {};\n\n\t\tfor ( var key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tObject3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   const w = 1920;\n\t\t *   const h = 1080;\n\t\t *   const fullWidth = w * 3;\n\t\t *   const fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar fov = 90, aspect = 1;\n\n\tfunction CubeCamera( near, far, renderTarget ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget !== true ) {\n\n\t\t\tconsole.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\n\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\trenderer.xr.enabled = false;\n\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\t\trenderer.render( scene, cameraPX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\t\trenderer.render( scene, cameraNX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\t\trenderer.render( scene, cameraPY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\t\trenderer.render( scene, cameraNY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\t\trenderer.render( scene, cameraPZ );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\t\trenderer.render( scene, cameraNZ );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction WebGLCubeRenderTarget( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tWebGLRenderTarget.call( this, size, size, options );\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tWebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = texture.format;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tvar scene = new Scene();\n\n\t\tvar shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\n\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\n\n\t\t\t\t\"\t#include <begin_vertex>\",\n\t\t\t\t\"\t#include <project_vertex>\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D tEquirect;\",\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"#include <common>\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\n\n\t\t\t\t\"\tvec2 sampleUV = equirectUv( direction );\",\n\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\t\t};\n\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\t\tscene.add( mesh );\n\n\t\tvar camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, scene );\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _sphere$1 = new Sphere();\n\tvar _vector$5 = new Vector3();\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromProjectionMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSprite: function ( sprite ) {\n\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t// corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tuv2Transform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tlightProbe: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {}\n\t\t\t} },\n\n\t\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowNormalBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {}\n\t\t\t} },\n\n\t\t\tspotLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowNormalBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {}\n\t\t\t} },\n\n\t\t\tpointLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowNormalBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\t\tvar requestId = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) { return; }\n\t\t\t\tif ( animationLoop === null ) { return; }\n\n\t\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = 5126;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = 5126;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = 5122;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = 5125;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = 5124;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = 5120;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = 5121;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( var iy$1 = 0; iy$1 < gridY; iy$1 ++ ) {\n\n\t\t\tfor ( var ix$1 = 0; ix$1 < gridX; ix$1 ++ ) {\n\n\t\t\t\tvar a = ix$1 + gridX1 * iy$1;\n\t\t\t\tvar b = ix$1 + gridX1 * ( iy$1 + 1 );\n\t\t\t\tvar c = ( ix$1 + 1 ) + gridX1 * ( iy$1 + 1 );\n\t\t\t\tvar d = ( ix$1 + 1 ) + gridX1 * iy$1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_maxMipLevel 8.0\\n#define cubeUV_minMipLevel 4.0\\n#define cubeUV_maxTileSize 256.0\\n#define cubeUV_minTileSize 16.0\\nfloat getFace(vec3 direction) {\\n    vec3 absDirection = abs(direction);\\n    float face = -1.0;\\n    if (absDirection.x > absDirection.z) {\\n      if (absDirection.x > absDirection.y)\\n        face = direction.x > 0.0 ? 0.0 : 3.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    } else {\\n      if (absDirection.z > absDirection.y)\\n        face = direction.z > 0.0 ? 2.0 : 5.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    }\\n    return face;\\n}\\nvec2 getUV(vec3 direction, float face) {\\n    vec2 uv;\\n    if (face == 0.0) {\\n      uv = vec2(direction.z, direction.y) / abs(direction.x);    } else if (face == 1.0) {\\n      uv = vec2(-direction.x, -direction.z) / abs(direction.y);    } else if (face == 2.0) {\\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);    } else if (face == 3.0) {\\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);    } else if (face == 4.0) {\\n      uv = vec2(-direction.x, direction.z) / abs(direction.y);    } else {\\n      uv = vec2(direction.x, direction.y) / abs(direction.z);    }\\n    return 0.5 * (uv + 1.0);\\n}\\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\\n  float face = getFace(direction);\\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\\n  mipInt = max(mipInt, cubeUV_minMipLevel);\\n  float faceSize = exp2(mipInt);\\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\\n  vec2 f = fract(uv);\\n  uv += 0.5 - f;\\n  if (face > 2.0) {\\n    uv.y += faceSize;\\n    face -= 3.0;\\n  }\\n  uv.x += face * faceSize;\\n  if(mipInt < cubeUV_maxMipLevel){\\n    uv.y += 2.0 * cubeUV_maxTileSize;\\n  }\\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\\n  uv *= texelSize;\\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x += texelSize;\\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.y += texelSize;\\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x -= texelSize;\\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  vec3 tm = mix(tl, tr, f.x);\\n  vec3 bm = mix(bl, br, f.x);\\n  return mix(tm, bm, f.y);\\n}\\n#define r0 1.0\\n#define v0 0.339\\n#define m0 -2.0\\n#define r1 0.8\\n#define v1 0.276\\n#define m1 -1.0\\n#define r4 0.4\\n#define v4 0.046\\n#define m4 2.0\\n#define r5 0.305\\n#define v5 0.016\\n#define m5 3.0\\n#define r6 0.21\\n#define v6 0.0038\\n#define m6 4.0\\nfloat roughnessToMip(float roughness) {\\n  float mip = 0.0;\\n  if (roughness >= r1) {\\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\\n  } else if (roughness >= r4) {\\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\\n  } else if (roughness >= r5) {\\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\\n  } else if (roughness >= r6) {\\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\\n  } else {\\n    mip = -2.0 * log2(1.16 * roughness);  }\\n  return mip;\\n}\\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\\n  float mipF = fract(mip);\\n  float mipInt = floor(mip);\\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\\n  if (mipF == 0.0) {\\n    return vec4(color0, 1.0);\\n  } else {\\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\\n    return vec4(mix(color0, color1, mipF), 1.0);\\n  }\\n}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec2 sampleUV = equirectUv( reflectVec );\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV = equirectUv( reflectVec );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3\\tdiffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 1.0 },\n\t\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\ttoon: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t\t},\n\n\t\tmatcap: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tmatcap: { value: null }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\tbackground: {\n\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\t\tt2D: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\n\t\t},\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t} ] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearcoat: { value: 0 },\n\t\t\t\tclearcoatMap: { value: null },\n\t\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\t\tclearcoatNormalMap: { value: null },\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\t\ttransparency: { value: 0 },\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.isScene === true ? scene.background : null;\n\n\t\t\t// Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\t\tbackground = null;\n\n\t\t\t}\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = background.isWebGLCubeRenderTarget ? background.texture : background;\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = texture;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== texture.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tbackground.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Takahiro / https://github.com/takahirox\n\t */\n\n\tfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\n\t\tvar extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\t\tvar vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\t\tvar bindingStates = {};\n\n\t\tvar defaultState = createBindingState( null );\n\t\tvar currentState = defaultState;\n\n\t\tfunction setup( object, material, program, geometry, index ) {\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( vaoAvailable ) {\n\n\t\t\t\tvar state = getBindingState( geometry, program, material );\n\n\t\t\t\tif ( currentState !== state ) {\n\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate( geometry );\n\n\t\t\t\tif ( updateBuffers ) { saveCache( geometry ); }\n\n\t\t\t} else {\n\n\t\t\t\tvar wireframe = ( material.wireframe === true );\n\n\t\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\t\tupdateBuffers = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh === true ) {\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, 34963 );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tgl.bindBuffer( 34963, attributes.get( index ).buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\n\t\t\tif ( capabilities.isWebGL2 ) { return gl.createVertexArray(); }\n\n\t\t\treturn extension.createVertexArrayOES();\n\n\t\t}\n\n\t\tfunction bindVertexArrayObject( vao ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) { return gl.bindVertexArray( vao ); }\n\n\t\t\treturn extension.bindVertexArrayOES( vao );\n\n\t\t}\n\n\t\tfunction deleteVertexArrayObject( vao ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) { return gl.deleteVertexArray( vao ); }\n\n\t\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t\t}\n\n\t\tfunction getBindingState( geometry, program, material ) {\n\n\t\t\tvar wireframe = ( material.wireframe === true );\n\n\t\t\tvar programMap = bindingStates[ geometry.id ];\n\n\t\t\tif ( programMap === undefined ) {\n\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t\t}\n\n\t\t\tvar stateMap = programMap[ program.id ];\n\n\t\t\tif ( stateMap === undefined ) {\n\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t\t}\n\n\t\t\tvar state = stateMap[ wireframe ];\n\n\t\t\tif ( state === undefined ) {\n\n\t\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\t\tstateMap[ wireframe ] = state;\n\n\t\t\t}\n\n\t\t\treturn state;\n\n\t\t}\n\n\t\tfunction createBindingState( vao ) {\n\n\t\t\tvar newAttributes = [];\n\t\t\tvar enabledAttributes = [];\n\t\t\tvar attributeDivisors = [];\n\n\t\t\tfor ( var i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\t\t\t\tenabledAttributes[ i ] = 0;\n\t\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t\t}\n\n\t\t\treturn {\n\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction needsUpdate( geometry ) {\n\n\t\t\tvar cachedAttributes = currentState.attributes;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( Object.keys( cachedAttributes ).length !== Object.keys( geometryAttributes ).length ) { return true; }\n\n\t\t\tfor ( var key in geometryAttributes ) {\n\n\t\t\t\tvar cachedAttribute = cachedAttributes[ key ];\n\t\t\t\tvar geometryAttribute = geometryAttributes[ key ];\n\n\t\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) { return true; }\n\n\t\t\t\tif ( cachedAttribute.data !== geometryAttribute.data ) { return true; }\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfunction saveCache( geometry ) {\n\n\t\t\tvar cache = {};\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif ( attribute.data ) {\n\n\t\t\t\t\tdata.data = attribute.data;\n\n\t\t\t\t}\n\n\t\t\t\tcache[ key ] = data;\n\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\n\t\t}\n\n\t\tfunction initAttributes() {\n\n\t\t\tvar newAttributes = currentState.newAttributes;\n\n\t\t\tfor ( var i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\t\t\tvar attributeDivisors = currentState.attributeDivisors;\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor ( var i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset ) {\n\n\t\t\tif ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {\n\n\t\t\t\tgl.vertexAttribIPointer( index, size, type, normalized, stride, offset );\n\n\t\t\t} else {\n\n\t\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\n\n\t\t\t}\n\n\t\t\tinitAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\tvertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\tvertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\t\tvar attribute$1 = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute$1 === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer$1 = attribute$1.buffer;\n\t\t\t\t\t\tvar type$1 = attribute$1.type;\n\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer$1 );\n\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 0, 4, type$1, false, 64, 0 );\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 1, 4, type$1, false, 64, 16 );\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 2, 4, type$1, false, 64, 32 );\n\t\t\t\t\t\tgl.vertexAttribPointer( programAttribute + 3, 4, type$1, false, 64, 48 );\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\treset();\n\n\t\t\tfor ( var geometryId in bindingStates ) {\n\n\t\t\t\tvar programMap = bindingStates[ geometryId ];\n\n\t\t\t\tfor ( var programId in programMap ) {\n\n\t\t\t\t\tvar stateMap = programMap[ programId ];\n\n\t\t\t\t\tfor ( var wireframe in stateMap ) {\n\n\t\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\t\tif ( bindingStates[ geometry.id ] === undefined ) { return; }\n\n\t\t\tvar programMap = bindingStates[ geometry.id ];\n\n\t\t\tfor ( var programId in programMap ) {\n\n\t\t\t\tvar stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( var wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometry.id ];\n\n\t\t}\n\n\t\tfunction releaseStatesOfProgram( program ) {\n\n\t\t\tfor ( var geometryId in bindingStates ) {\n\n\t\t\t\tvar programMap = bindingStates[ geometryId ];\n\n\t\t\t\tif ( programMap[ program.id ] === undefined ) { continue; }\n\n\t\t\t\tvar stateMap = programMap[ program.id ];\n\n\t\t\t\tfor ( var wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ program.id ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\tresetDefaultState();\n\n\t\t\tif ( currentState === defaultState ) { return; }\n\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t}\n\n\t\t// for backward-compatilibity\n\n\t\tfunction resetDefaultState() {\n\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\t/* eslint-disable no-undef */\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( 34930 );\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\t\tvar maxAttributes = gl.getParameter( 34921 );\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\t\tvar maxVaryings = gl.getParameter( 36348 );\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\t\tmaxSamples: maxSamples\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this;\n\n\t\tvar globalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false;\n\n\t\tvar plane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\t\tvar dstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tgeometries.delete( geometry );\n\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries.set( geometry, buffergeometry );\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name$1 in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name$1 ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateWireframeAttribute( geometry ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array$1 = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor ( var i$1 = 0, l$1 = ( array$1.length / 3 ) - 1; i$1 < l$1; i$1 += 3 ) {\n\n\t\t\t\t\tvar a$1 = i$1 + 0;\n\t\t\t\t\tvar b$1 = i$1 + 1;\n\t\t\t\t\tvar c$1 = i$1 + 2;\n\n\t\t\t\t\tindices.push( a$1, b$1, b$1, c$1, c$1, a$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\t\tattribute.version = version;\n\n\t\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\n\n\t\t\t//\n\n\t\t\twireframeAttributes.set( geometry, attribute );\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( currentAttribute ) {\n\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get( geometry );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction numericalSort( a, b ) {\n\n\t\treturn a[ 0 ] - b[ 0 ];\n\n\t}\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tvar workInfluences = [];\n\n\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t\t}\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i$1 = 0; i$1 < length; i$1 ++ ) {\n\n\t\t\t\tvar influence = influences[ i$1 ];\n\n\t\t\t\tinfluence[ 0 ] = i$1;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i$1 ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( var i$2 = 0; i$2 < 8; i$2 ++ ) {\n\n\t\t\t\tif ( i$2 < length && influences[ i$2 ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i$2 ][ 0 ] = influences[ i$2 ][ 0 ];\n\t\t\t\t\tworkInfluences[ i$2 ][ 1 ] = influences[ i$2 ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i$2 ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i$2 ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor ( var i$3 = 0; i$3 < 8; i$3 ++ ) {\n\n\t\t\t\tvar influence$1 = workInfluences[ i$3 ];\n\t\t\t\tvar index = influence$1[ 0 ];\n\t\t\t\tvar value = influence$1[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i$3 ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i$3, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i$3 ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i$3, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i$3 ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i$3 ) !== undefined ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i$3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i$3 ) !== undefined ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i$3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i$3 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateMap = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction DataTexture2DArray( data, width, height, depth ) {\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\t/**\n\t * @author Artur Trzesiok\n\t */\n\n\tfunction DataTexture3D( data, width, height, depth ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\n\t}\n\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) { return false; }\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( textures, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValueV1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValueV2f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV3f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV4f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValueM2( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM3( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM4( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT2DArray1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n\t}\n\n\tfunction setValueT3D1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValueV1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValueV2i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV3i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV4i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// uint\n\n\tfunction setValueV1ui( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1ui( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\t\tcase 0x1405: return setValueV1ui; // UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\tfunction setValueV1fArray( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\tfunction setValueV1iArray( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV2iArray( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV3iArray( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV4iArray( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV3fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV4fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM3Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM4Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\t\tvar id = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map;\n\t\t\t\tvar next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) { r.push( u ); }\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\n\t\t}\n\n\t}\n\n\tfunction getShaderErrors( gl, shader, type ) {\n\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && log === '' ) { return ''; }\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource( shader );\n\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\t\ttoneMappingName = 'Linear';\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( parameters ) {\n\n\t\tvar chunks = [\n\t\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) { continue; }\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35721 );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\t// Resolve Includes\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes( string ) {\n\n\t\treturn string.replace( includePattern, includeReplacer );\n\n\t}\n\n\tfunction includeReplacer( match, include ) {\n\n\t\tvar string = ShaderChunk[ include ];\n\n\t\tif ( string === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn resolveIncludes( string );\n\n\t}\n\n\t// Unroll Loops\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}[\\s]+?#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops( string ) {\n\n\t\treturn string\n\t\t\t.replace( unrollLoopPattern, loopReplacer )\n\t\t\t.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n\n\t}\n\n\tfunction deprecatedLoopReplacer( match, start, end, snippet ) {\n\n\t\tconsole.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n\t\treturn loopReplacer( match, start, end, snippet );\n\n\t}\n\n\tfunction loopReplacer( match, start, end, snippet ) {\n\n\t\tvar string = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tstring += snippet\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t\t}\n\n\t\treturn string;\n\n\t}\n\n\t//\n\n\tfunction generatePrecision( parameters ) {\n\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif ( parameters.precision === \"highp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t\t}\n\n\t\treturn precisionstring;\n\n\t}\n\n\tfunction generateShadowMapTypeDefine( parameters ) {\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapTypeDefine( parameters ) {\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapModeDefine( parameters ) {\n\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapModeDefine;\n\n\t}\n\n\tfunction generateEnvMapBlendingDefine( parameters ) {\n\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\n\t}\n\n\tfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t\tvar gl = renderer.getContext();\n\n\t\tvar defines = parameters.defines;\n\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( parameters.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t\t' attribute mat4 instanceMatrix;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.map ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.matcap ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\t\tparameters.envMap ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMap ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.lightMap ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = resolveIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = resolveIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( parameters.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Clean up\n\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t//\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount ++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities, bindingStates ) {\n\n\t\tvar programs = [];\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\n\t\tvar precision = capabilities.precision;\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\",\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\t\"sheen\"\n\t\t];\n\n\t\tfunction getShaderObject( material, shaderID ) {\n\n\t\t\tvar shaderobject;\n\n\t\t\tif ( shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ shaderID ];\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.name || material.type,\n\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.name || material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn shaderobject;\n\n\t\t}\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tfunction getParameters( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar shaderobject = getShaderObject( material, shaderID );\n\t\t\tmaterial.onBeforeCompile( shaderobject, renderer );\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tisWebGL2: isWebGL2,\n\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: shaderobject.name,\n\n\t\t\t\tuniforms: shaderobject.uniforms,\n\t\t\t\tvertexShader: shaderobject.vertexShader,\n\t\t\t\tfragmentShader: shaderobject.fragmentShader,\n\t\t\t\tdefines: material.defines,\n\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial,\n\t\t\t\tisShaderMaterial: material.isShaderMaterial,\n\n\t\t\t\tprecision: precision,\n\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\t\tmatcap: !! material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\t\tenvMap: !! envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !! material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !! material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tsheen: !! material.sheen,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,\n\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t}\n\n\t\tfunction getProgramCacheKey( parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( parameters.fragmentShader );\n\t\t\t\tarray.push( parameters.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in parameters.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parameters.isRawShaderMaterial === undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t\t}\n\n\t\t\t\tarray.push( renderer.outputEncoding );\n\t\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t\t}\n\n\t\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\t\treturn array.join();\n\n\t\t}\n\n\t\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction releaseProgram( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tvar defaultProgram = { id: - 1 };\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\trenderItemsIndex ++;\n\n\t\t\treturn renderItem;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t}\n\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t\t}\n\n\t\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( customOpaqueSort || painterSortStable ); }\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( customTransparentSort || reversePainterSortStable ); }\n\n\t\t}\n\n\t\tfunction finish() {\n\n\t\t\t// Clear references from inactive renderItems in the list\n\n\t\t\tfor ( var i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\t\tvar renderItem = renderItems[ i ];\n\n\t\t\t\tif ( renderItem.id === null ) { break; }\n\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\tlists.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar cameras = lists.get( scene );\n\t\t\tvar list;\n\n\t\t\tif ( cameras === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists.set( scene, new WeakMap() );\n\t\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tlist = cameras.get( camera );\n\t\t\t\tif ( list === undefined ) {\n\n\t\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\t\tcameras.set( camera, list );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction ShadowUniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar shadowCache = ShadowUniformsCache();\n\n\t\tvar state = {\n\n\t\t\tversion: 0,\n\n\t\t\thash: {\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\n\t\t\t\tnumDirectionalShadows: - 1,\n\t\t\t\tnumPointShadows: - 1,\n\t\t\t\tnumSpotShadows: - 1\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\n\t\t};\n\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t\tfor ( var i$1 = 0, l = lights.length; i$1 < l; i$1 ++ ) {\n\n\t\t\t\tvar light = lights[ i$1 ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms$1 = cache.get( light );\n\n\t\t\t\t\tuniforms$1.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$1.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms$1.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms$1.distance = distance;\n\n\t\t\t\t\tuniforms$1.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms$1.direction.sub( vector3 );\n\t\t\t\t\tuniforms$1.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms$1.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms$1.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms$1.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow$1 = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms$1 = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms$1.shadowBias = shadow$1.bias;\n\t\t\t\t\t\tshadowUniforms$1.shadowNormalBias = shadow$1.normalBias;\n\t\t\t\t\t\tshadowUniforms$1.shadowRadius = shadow$1.radius;\n\t\t\t\t\t\tshadowUniforms$1.shadowMapSize = shadow$1.mapSize;\n\n\t\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms$1;\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms$1;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms$2 = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms$2.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms$2.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$2.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms$2.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms$2.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms$2.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms$2.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms$2;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms$3 = cache.get( light );\n\n\t\t\t\t\tuniforms$3.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$3.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms$3.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms$3.distance = light.distance;\n\t\t\t\t\tuniforms$3.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow$2 = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms$2 = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms$2.shadowBias = shadow$2.bias;\n\t\t\t\t\t\tshadowUniforms$2.shadowNormalBias = shadow$2.normalBias;\n\t\t\t\t\t\tshadowUniforms$2.shadowRadius = shadow$2.radius;\n\t\t\t\t\t\tshadowUniforms$2.shadowMapSize = shadow$2.mapSize;\n\t\t\t\t\t\tshadowUniforms$2.shadowCameraNear = shadow$2.camera.near;\n\t\t\t\t\t\tshadowUniforms$2.shadowCameraFar = shadow$2.camera.far;\n\n\t\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms$2;\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[ pointLength ] = uniforms$3;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms$4 = cache.get( light );\n\n\t\t\t\t\tuniforms$4.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms$4.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms$4.direction.normalize();\n\n\t\t\t\t\tuniforms$4.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms$4.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms$4;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tvar hash = state.hash;\n\n\t\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\t\thash.pointLength !== pointLength ||\n\t\t\t\thash.spotLength !== spotLength ||\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\t\thash.hemiLength !== hemiLength ||\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\t\tstate.version = nextVersion ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\trenderStates.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum();\n\n\t\tvar _shadowMapSize = new Vector2(),\n\t\t\t_viewportSize = new Vector2(),\n\n\t\t\t_viewport = new Vector4(),\n\n\t\t\t_depthMaterials = [],\n\t\t\t_distanceMaterials = [],\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: { value: null },\n\t\t\t\tresolution: { value: new Vector2() },\n\t\t\t\tradius: { value: 4.0 }\n\t\t\t},\n\n\t\t\tvertexShader: vsm_vert,\n\n\t\t\tfragmentShader: vsm_frag\n\n\t\t} );\n\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew BufferAttribute(\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) { return; }\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\n\n\t\t\tif ( lights.length === 0 ) { return; }\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.setBlending( NoBlending );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) { continue; }\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars$1 = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars$1 );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t\t_viewport.set(\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t\t);\n\n\t\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t\t}\n\n\t\t\t\t// do blur pass for VSM\n\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t};\n\n\t\tfunction VSMPass( shadow, camera ) {\n\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t\t// vertical pass\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t\t// horizonal pass\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t\t}\n\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _depthMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDepthMaterial( {\n\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_depthMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _distanceMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_distanceMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDepthMaterial( object, geometry, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\t\tvar result = null;\n\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( light.isPointLight === true ) {\n\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( customMaterial === undefined ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\t\tif ( material.skinning === true ) {\n\n\t\t\t\t\t\tuseSkinning = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif ( type === VSMShadowMap ) {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t\t} else {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial$1 = getDepthMaterial( object, geometry, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial$1, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( 35661 );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( 7938 );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, 10241, 9728 );\n\t\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( 2929 );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( 2884 );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar equationToGL = {};\n\t\tequationToGL[ AddEquation ] = 32774;\n\t\tequationToGL[ SubtractEquation ] = 32778;\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\tequationToGL[ MinEquation ] = 32775;\n\t\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t\t} else {\n\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar factorToGL = {};\n\t\tfactorToGL[ ZeroFactor ] = 0;\n\t\tfactorToGL[ OneFactor ] = 1;\n\t\tfactorToGL[ SrcColorFactor ] = 768;\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\n\t\tfactorToGL[ DstColorFactor ] = 774;\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( 3042 );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( 2884 )\n\t\t\t\t: enable( 2884 );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest( stencilWrite );\n\t\t\tif ( stencilWrite ) {\n\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t\t}\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( 2884 );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 2884 );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( 32823 );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 32823 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( 3089 );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 3089 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unbindTexture() {\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage3D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\t\tvar _canvas;\n\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t\t} catch ( err ) {\n\n\t\t\t// Ignore any errors\n\n\t\t}\n\n\t\tfunction createCanvas( width, height ) {\n\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\t\treturn useOffscreenCanvas ?\n\t\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t}\n\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\t\tvar scale = 1;\n\n\t\t\t// handle case if texture exceeds max size\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t}\n\n\t\t\t// only perform resize if necessary\n\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t\t// only perform resize for certain image types\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\n\t\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\n\n\t\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\t\treturn canvas;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( isWebGL2 ) { return false; }\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( internalFormatName, glFormat, glType ) {\n\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\n\n\t\t\tif ( internalFormatName !== null ) {\n\n\t\t\t\tif ( _gl[ internalFormatName ] !== undefined ) { return _gl[ internalFormatName ]; }\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif ( glFormat === 6403 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6407 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6408 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\n\n\t\t\t}\n\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\t\treturn 9728;\n\n\t\t\t}\n\n\t\t\treturn 9729;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures.delete( texture );\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) { return; }\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) { _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer ); }\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\n\t\t\ttextureUnits = 0;\n\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture2DArray( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture3D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tif ( texture.image.length !== 6 ) { return; }\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\t\tvar mipmaps;\n\n\t\t\t\tif ( isCompressed ) {\n\n\t\t\t\t\tfor ( var i$1 = 0; i$1 < 6; i$1 ++ ) {\n\n\t\t\t\t\t\tmipmaps = cubeImage[ i$1 ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i$1, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$1, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\t\tfor ( var i$2 = 0; i$2 < 6; i$2 ++ ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, 0, glInternalFormat, cubeImage[ i$2 ].width, cubeImage[ i$2 ].height, 0, glFormat, glType, cubeImage[ i$2 ].data );\n\n\t\t\t\t\t\t\tfor ( var j$1 = 0; j$1 < mipmaps.length; j$1 ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap$1 = mipmaps[ j$1 ];\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap$1.image[ i$2 ].image;\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, j$1 + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, 0, glInternalFormat, glFormat, glType, cubeImage[ i$2 ] );\n\n\t\t\t\t\t\t\tfor ( var j$2 = 0; j$2 < mipmaps.length; j$2 ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap$2 = mipmaps[ j$2 ];\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i$2, j$2 + 1, glInternalFormat, glFormat, glType, mipmap$2.image[ i$2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tvar wrappingToGL = {};\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\n\n\t\tvar filterToGL = {};\n\t\tfilterToGL[ NearestFilter ] = 9728;\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\n\t\tfilterToGL[ LinearFilter ] = 9729;\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\n\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\t\tif ( supportsMips ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initTexture( textureProperties, texture ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tvar textureType = 3553;\n\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format );\n\n\t\t\tvar glType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tvar mipmap;\n\t\t\tvar mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i$1 = 0, il$1 = mipmaps.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i$1 ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i$1, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i$1, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i$2 = 0, il$2 = mipmaps.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i$2 ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i$2, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples$1 = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples$1, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\tvar glInternalFormat$1 = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples$2 = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples$2, glInternalFormat$1, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat$1, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\t// Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif ( isWebGL2 && renderTarget.texture.format === RGBFormat && ( renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType ) ) {\n\n\t\t\t\trenderTarget.texture.format = RGBAFormat;\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n\n\t\t\t}\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < 6; i$1 ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i$1 ], renderTarget, 36064, 34069 + i$1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 34067, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 3553, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer ); // see #18905\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t\t_videoTextures.set( texture, frame );\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// backwards compatibility\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTexture2D = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( texture, slot );\n\n\t\t}\n\n\t\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTextureCube = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\tsetTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLCubeRenderTarget\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\n\n\t\t\tif ( p === ByteType ) { return 5120; }\n\t\t\tif ( p === ShortType ) { return 5122; }\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\n\t\t\tif ( p === IntType ) { return 5124; }\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\n\t\t\tif ( p === FloatType ) { return 5126; }\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\n\t\t\tif ( p === RGBFormat ) { return 6407; }\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\n\t\t\tif ( p === DepthFormat ) { return 6402; }\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\n\t\t\tif ( p === RedFormat ) { return 6403; }\n\n\t\t\t// WebGL2 formats.\n\n\t\t\tif ( p === RedIntegerFormat ) { return 36244; }\n\t\t\tif ( p === RGFormat ) { return 33319; }\n\t\t\tif ( p === RGIntegerFormat ) { return 33320; }\n\t\t\tif ( p === RGBIntegerFormat ) { return 36248; }\n\t\t\tif ( p === RGBAIntegerFormat ) { return 36249; }\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_ETC2_Format ) { return extension.COMPRESSED_RGB8_ETC2; }\n\t\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) { return extension.COMPRESSED_RGBA8_ETC2_EAC; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebXRController() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\n\t}\n\n\tObject.assign( WebXRController.prototype, {\n\n\t\tconstructor: WebXRController,\n\n\t\tgetTargetRaySpace: function () {\n\n\t\t\tif ( this._targetRay === null ) {\n\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\n\t\t},\n\n\t\tgetGripSpace: function () {\n\n\t\t\tif ( this._grip === null ) {\n\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\n\t\t\t}\n\n\t\t\treturn this._grip;\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._targetRay !== null ) {\n\n\t\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t\t}\n\n\t\t\tif ( this._grip !== null ) {\n\n\t\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function ( inputSource ) {\n\n\t\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\tif ( this._targetRay !== null ) {\n\n\t\t\t\tthis._targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\tif ( this._grip !== null ) {\n\n\t\t\t\tthis._grip.visible = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdate: function ( inputSource, frame, referenceSpace ) {\n\n\t\t\tvar inputPose = null;\n\t\t\tvar gripPose = null;\n\n\t\t\tvar targetRay = this._targetRay;\n\t\t\tvar grip = this._grip;\n\n\t\t\tif ( inputSource ) {\n\n\t\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t\t}\n\n\t\t\tif ( grip !== null ) {\n\n\t\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer, gl ) {\n\n\t\tvar scope = this;\n\n\t\tvar session = null;\n\n\t\tvar framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameras = [ cameraL, cameraR ];\n\n\t\tvar cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tvar controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tvar controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tvar controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: event.type } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tcontroller.disconnect( inputSource );\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t//\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tfunction onRequestReferenceSpace( value ) {\n\n\t\t\treferenceSpace = value;\n\n\t\t\tanimation.setContext( session );\n\t\t\tanimation.start();\n\n\t\t\tscope.isPresenting = true;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tgl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tvar layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t};\n\n\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\tvar baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t\t//\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateInputSources( event ) {\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( var i$1 = 0; i$1 < event.removed.length; i$1 ++ ) {\n\n\t\t\t\tvar inputSource = event.removed[ i$1 ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( var i$2 = 0; i$2 < event.added.length; i$2 ++ ) {\n\n\t\t\t\tvar inputSource$1 = event.added[ i$2 ];\n\t\t\t\tvar controller$1 = inputSourcesMap.get( inputSource$1 );\n\n\t\t\t\tif ( controller$1 ) {\n\n\t\t\t\t\tcontroller$1.dispatchEvent( { type: 'connected', data: inputSource$1 } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * @author jsantell / https://www.jsantell.com/\n\t\t *\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + ( ipd - xOffset );\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i$1 = 0, l = children.length; i$1 < l; i$1 ++ ) {\n\n\t\t\t\tchildren[ i$1 ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\t\tvar cameraVRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif ( views.length !== cameraVR.cameras.length ) {\n\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\n\t\t\t\t\tvar camera = cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraVRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraVR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor ( var i$1 = 0; i$1 < controllers.length; i$1 ++ ) {\n\n\t\t\t\tvar controller = controllers[ i$1 ];\n\t\t\t\tvar inputSource = inputSources[ i$1 ];\n\n\t\t\t\tcontroller.update( inputSource, frame, referenceSpace );\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time, frame ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLMaterials( properties ) {\n\n\t\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshMaterialUniforms( uniforms, material, environment, pixelRatio, height ) {\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsLambert( uniforms, material );\n\n\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material, environment );\n\n\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( uniforms, material, environment );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsStandard( uniforms, material, environment );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsDepth( uniforms, material );\n\n\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\t\trefreshUniformsNormal( uniforms, material );\n\n\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\tuniforms.color.value.copy( material.color );\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsCommon( uniforms, material, environment ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tif ( envMap ) {\n\n\t\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t\t} else if ( material.lightMap ) {\n\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material, environment ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap || environment ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material, environment ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material, environment );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniforms.transparency.value = material.transparency;\n\n\t\t}\n\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\t\tif ( material.matcap ) {\n\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\n\t}\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.outputEncoding = LinearEncoding;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this;\n\n\t\tvar _isContextLost = false;\n\n\t\t// internal state cache\n\n\t\tvar _framebuffer = null;\n\n\t\tvar _currentActiveCubeFace = 0;\n\t\tvar _currentActiveMipmapLevel = 0;\n\t\tvar _currentRenderTarget = null;\n\t\tvar _currentFramebuffer = null;\n\t\tvar _currentMaterialId = - 1;\n\n\t\tvar _currentCamera = null;\n\t\tvar _currentArrayCamera = null;\n\n\t\tvar _currentViewport = new Vector4();\n\t\tvar _currentScissor = new Vector4();\n\t\tvar _currentScissorTest = null;\n\n\t\t//\n\n\t\tvar _width = _canvas.width;\n\t\tvar _height = _canvas.height;\n\n\t\tvar _pixelRatio = 1;\n\t\tvar _opaqueSort = null;\n\t\tvar _transparentSort = null;\n\n\t\tvar _viewport = new Vector4( 0, 0, _width, _height );\n\t\tvar _scissor = new Vector4( 0, 0, _width, _height );\n\t\tvar _scissorTest = false;\n\n\t\t// frustum\n\n\t\tvar _frustum = new Frustum();\n\n\t\t// clipping\n\n\t\tvar _clipping = new WebGLClipping();\n\t\tvar _clippingEnabled = false;\n\t\tvar _localClippingEnabled = false;\n\n\t\t// camera matrices cache\n\n\t\tvar _projScreenMatrix = new Matrix4();\n\n\t\tvar _vector3 = new Vector3();\n\n\t\tvar _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl = _context;\n\n\t\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\t\tfor ( var i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\t\tvar contextName = contextNames[ i ];\n\t\t\t\tvar context = _canvas.getContext( contextName, contextAttributes );\n\t\t\t\tif ( context !== null ) { return context; }\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tvar contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\t\tcontextNames.shift();\n\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\t\tif ( _gl === null ) {\n\n\t\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, materials, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'OES_vertex_array_object' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities, bindingStates );\n\t\t\tmaterials = new WebGLMaterials( properties );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tvar xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.loseContext(); }\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.restoreContext(); }\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) { return; }\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\t\ttarget = new Vector4();\n\n\t\t\t}\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tbindingStates.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\t\tbindingStates.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) { scene = _emptyScene; } // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tif ( position === undefined || position.count === 0 ) { return; }\n\n\t\t\t} else if ( index.count === 0 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tif ( material.morphTargets || material.morphNormals ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t}\n\n\t\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( 0 );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tvar instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, instanceCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tvar compiled = new WeakMap();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material ) {\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\t\tvar material2 = material[ i ];\n\n\t\t\t\t\t\t\tif ( compiled.has( material2 ) === false ) {\n\n\t\t\t\t\t\t\t\tinitMaterial( material2, scene, object );\n\t\t\t\t\t\t\t\tcompiled.set( material2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( compiled.has( material ) === false ) {\n\n\t\t\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\t\t\tcompiled.set( material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( xr.isPresenting ) { return; }\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t\t}\n\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\t\tforceClear = arguments[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost === true ) { return; }\n\n\t\t\t// reset caching for this frame\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\n\n\t\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\t\tcamera = xr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\t\t\tif ( scene.isScene === true ) { scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget ); }\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled === true ) { _clipping.beginShadows(); }\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled === true ) { _clipping.endShadows(); }\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset === true ) { this.info.reset(); }\n\n\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( opaqueObjects.length > 0 ) { renderObjects( opaqueObjects, scene, camera ); }\n\t\t\tif ( transparentObjects.length > 0 ) { renderObjects( transparentObjects, scene, camera ); }\n\n\t\t\t//\n\n\t\t\tif ( scene.isScene === true ) { scene.onAfterRender( _this, scene, camera ); }\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry$1 = objects.update( object );\n\t\t\t\t\t\tvar material$1 = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material$1 ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry$1.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material$1[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry$1, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material$1.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry$1, material$1, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i$1 = 0, l$1 = children.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\tprojectObject( children[ i$1 ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\t\tvar overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\tbindingStates.reset();\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, scene, object ) {\n\n\t\t\tif ( scene.isScene !== true ) { scene = _emptyScene; } // scene could be a Mesh, Line, Points, ...\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsStateVersion = lights.state.version;\n\n\t\t\tvar parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i$1 = 0; i$1 < _this.maxMorphNormals; i$1 ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i$1 ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, material, object ) {\n\n\t\t\tif ( scene.isScene !== true ) { scene = _emptyScene; } // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled === true ) {\n\n\t\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.environment !== environment ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.outputEncoding !== encoding ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, environment, _pixelRatio, _height );\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\t//\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar _webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tframebuffer = _webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = _webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar levelScale = Math.pow( 2, - level );\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\t// As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\t\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t\t_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Generate mipmaps only when copying level 0\n\t\t\tif ( level === 0 && dstTexture.generateMipmaps ) { _gl.generateMipmap( 3553 ); }\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGL1Renderer( parameters ) {\n\n\t\tWebGLRenderer.call( this, parameters );\n\n\t}\n\n\tWebGL1Renderer.prototype = Object.assign( Object.create( WebGLRenderer.prototype ), {\n\n\t\tconstructor: WebGL1Renderer,\n\n\t\tisWebGL1Renderer: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tObject.assign( FogExp2.prototype, {\n\n\t\tisFogExp2: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new FogExp2( this.color, this.density );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tObject.assign( Fog.prototype, {\n\n\t\tisFog: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new Fog( this.color, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function ( data ) {\n\n\t\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\t\tdata.arrayBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\n\t\t\t}\n\n\t\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t\t}\n\n\t\t\tvar array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\t\tvar ib = new InterleavedBuffer( array, this.stride );\n\t\t\tib.setUsage( this.usage );\n\n\t\t\treturn ib;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( data ) {\n\n\t\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\t\tdata.arrayBuffers = {};\n\n\t\t\t}\n\n\t\t\t// generate UUID for array buffer if necessary\n\n\t\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\n\t\t\t}\n\n\t\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.prototype.slice.call( new Uint32Array( this.array.buffer ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$6.x = this.getX( i );\n\t\t\t\t_vector$6.y = this.getY( i );\n\t\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function ( data ) {\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0; i < this.count; i ++ ) {\n\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor ( var j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( data ) {\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0; i < this.count; i ++ ) {\n\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor ( var j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// deinterleave data and save it as an ordinary buffer attribute for now\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\t// save as true interlaved attribtue\n\n\t\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\tvar _worldScale = new Vector3();\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\tvar _rotatedPosition = new Vector2();\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\tvar _vB$1 = new Vector3();\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\tvar _uvB$1 = new Vector2();\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\n\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t\t_uvA$1.set( 0, 0 );\n\t\t\t_uvB$1.set( 1, 0 );\n\t\t\t_uvC$1.set( 1, 1 );\n\n\t\t\t// check first triangle\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\n\n\t\t\tthis.material = source.material;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t// to check if rotation is not zero\n\t\tif ( sin !== undefined ) {\n\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t\t} else {\n\n\t\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t\t}\n\n\n\t\tvertexPosition.copy( mvPosition );\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y;\n\n\t\t// transform to world space\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v1$4 = new Vector3();\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tisLOD: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) { distance = 0; }\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tvar l;\n\n\t\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCurrentLevel: function () {\n\n\t\t\treturn this._currentLevel;\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn levels[ i - 1 ].object;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 ) / camera.zoom;\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tMesh.prototype.copy.call( this, source );\n\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\t\tthis.skeleton = source.skeleton;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar vector = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\t\tvector.x = skinWeight.getX( i );\n\t\t\t\tvector.y = skinWeight.getY( i );\n\t\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tboneTransform: ( function () {\n\n\t\t\tvar basePosition = new Vector3();\n\n\t\t\tvar skinIndex = new Vector4();\n\t\t\tvar skinWeight = new Vector4();\n\n\t\t\tvar vector = new Vector3();\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function ( index, target ) {\n\n\t\t\t\tvar skeleton = this.skeleton;\n\t\t\t\tvar geometry = this.geometry;\n\n\t\t\t\tskinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t\t\tskinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t\t\tbasePosition.fromBufferAttribute( geometry.attributes.position, index ).applyMatrix4( this.bindMatrix );\n\n\t\t\t\ttarget.set( 0, 0, 0 );\n\n\t\t\t\tfor ( var i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\tvar weight = skinWeight.getComponent( i );\n\n\t\t\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\t\t\tvar boneIndex = skinIndex.getComponent( i );\n\n\t\t\t\t\t\tmatrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\t\t\ttarget.addScaledVector( vector.copy( basePosition ).applyMatrix4( matrix ), weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t\t\t};\n\n\t\t}() )\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tvar _offsetMatrix = new Matrix4();\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\tthis.frame = - 1;\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( var i$1 = 0, il$1 = this.bones.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\tvar bone$1 = this.bones[ i$1 ];\n\n\t\t\t\tif ( bone$1 ) {\n\n\t\t\t\t\tif ( bone$1.parent && bone$1.parent.isBone ) {\n\n\t\t\t\t\t\tbone$1.matrix.getInverse( bone$1.parent.matrixWorld );\n\t\t\t\t\t\tbone$1.matrix.multiply( bone$1.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone$1.matrix.copy( bone$1.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone$1.matrix.decompose( bone$1.position, bone$1.quaternion, bone$1.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tdispose: function ( ) {\n\n\t\t\tif ( this.boneTexture ) {\n\n\t\t\t\tthis.boneTexture.dispose();\n\n\t\t\t\tthis.boneTexture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh( geometry, material, count ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: InstancedMesh,\n\n\t\tisInstancedMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tMesh.prototype.copy.call( this, source );\n\n\t\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\t\t\tthis.count = source.count;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\n\t\t\tif ( _mesh.material === undefined ) { return; }\n\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t\t// calculate the world matrix for each instance\n\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t\t// the mesh represents this single instance\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t\t// process the result of raycast\n\n\t\t\t\tfor ( var i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar intersect = _instanceIntersects[ i ];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push( intersect );\n\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start = new Vector3();\n\tvar _end = new Vector3();\n\tvar _inverseMatrix$1 = new Matrix4();\n\tvar _ray$1 = new Ray();\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances$1 = geometry.lineDistances;\n\n\t\t\t\tlineDistances$1[ 0 ] = 0;\n\n\t\t\t\tfor ( var i$1 = 1, l$1 = vertices.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\t\tlineDistances$1[ i$1 ] = lineDistances$1[ i$1 - 1 ];\n\t\t\t\t\tlineDistances$1[ i$1 ] += vertices[ i$1 - 1 ].distanceTo( vertices[ i$1 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t\t_sphere$2.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i$1 = 0, l$1 = positions.length / 3 - 1; i$1 < l$1; i$1 += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i$1 );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i$1 + 3 );\n\n\t\t\t\t\t\tvar distSq$1 = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq$1 > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance$1 = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance$1 < raycaster.near || distance$1 > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance$1,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i$1,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i$2 = 0; i$2 < nbVertices - 1; i$2 += step ) {\n\n\t\t\t\t\tvar distSq$2 = _ray$1.distanceSqToSegment( vertices[ i$2 ], vertices[ i$2 + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq$2 > localThresholdSq ) { continue; }\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance$2 = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance$2 < raycaster.near || distance$2 > raycaster.far ) { continue; }\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance$2,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i$2,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tvar name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start$1 = new Vector3();\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances$1 = geometry.lineDistances;\n\n\t\t\t\tfor ( var i$1 = 0, l$1 = vertices.length; i$1 < l$1; i$1 += 2 ) {\n\n\t\t\t\t\t_start$1.copy( vertices[ i$1 ] );\n\t\t\t\t\t_end$1.copy( vertices[ i$1 + 1 ] );\n\n\t\t\t\t\tlineDistances$1[ i$1 ] = ( i$1 === 0 ) ? 0 : lineDistances$1[ i$1 - 1 ];\n\t\t\t\t\tlineDistances$1[ i$1 + 1 ] = lineDistances$1[ i$1 ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\tvar _ray$2 = new Ray();\n\tvar _sphere$3 = new Sphere();\n\tvar _position$1 = new Vector3();\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t\t_sphere$3.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i$1 = 0, l = positions.length / 3; i$1 < l; i$1 ++ ) {\n\n\t\t\t\t\t\t_position$1.fromArray( positions, i$1 * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, i$1, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i$2 = 0, l$1 = vertices.length; i$2 < l$1; i$2 ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i$2 ], i$2, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( var m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tvar name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar edge = [ 0, 0 ], edges = {};\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tvar edge1 = face[ keys[ j ] ];\n\t\t\t\t\tvar edge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tvar key = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( var key$1 in edges ) {\n\n\t\t\t\tvar e = edges[ key$1 ];\n\n\t\t\t\tvar vertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar vertex$1 = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar indices = geometry.index;\n\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i$1 = start, l$1 = ( start + count ); i$1 < l$1; i$1 += 3 ) {\n\n\t\t\t\t\t\tfor ( var j$1 = 0; j$1 < 3; j$1 ++ ) {\n\n\t\t\t\t\t\t\tvar edge1$1 = indices.getX( i$1 + j$1 );\n\t\t\t\t\t\t\tvar edge2$1 = indices.getX( i$1 + ( j$1 + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1$1, edge2$1 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1$1, edge2$1 );\n\n\t\t\t\t\t\t\tvar key$2 = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key$2 ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key$2 ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( var key$3 in edges ) {\n\n\t\t\t\t\tvar e$1 = edges[ key$3 ];\n\n\t\t\t\t\tvertex$1.fromBufferAttribute( position, e$1.index1 );\n\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t\tvertex$1.fromBufferAttribute( position, e$1.index2 );\n\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tvar position$1 = geometry.attributes.position;\n\n\t\t\t\tfor ( var i$2 = 0, l$2 = ( position$1.count / 3 ); i$2 < l$2; i$2 ++ ) {\n\n\t\t\t\t\tfor ( var j$2 = 0; j$2 < 3; j$2 ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tvar index1 = 3 * i$2 + j$2;\n\t\t\t\t\t\tvertex$1.fromBufferAttribute( position$1, index1 );\n\t\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t\t\tvar index2 = 3 * i$2 + ( ( j$2 + 1 ) % 3 );\n\t\t\t\t\t\tvertex$1.fromBufferAttribute( position$1, index2 );\n\t\t\t\t\t\tvertices.push( vertex$1.x, vertex$1.y, vertex$1.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( var i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( var j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( var i$1 = 0; i$1 < stacks; i$1 ++ ) {\n\n\t\t\tfor ( var j$1 = 0; j$1 < slices; j$1 ++ ) {\n\n\t\t\t\tvar a = i$1 * sliceCount + j$1;\n\t\t\t\tvar b = i$1 * sliceCount + j$1 + 1;\n\t\t\t\tvar c = ( i$1 + 1 ) * sliceCount + j$1 + 1;\n\t\t\t\tvar d = ( i$1 + 1 ) * sliceCount + j$1;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( var i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( var i$1 = 0; i$1 < cols; i$1 ++ ) {\n\n\t\t\t\tfor ( var j$1 = 0; j$1 < 2 * ( cols - i$1 ) - 1; j$1 ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j$1 / 2 );\n\n\t\t\t\t\tif ( j$1 % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i$1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i$1 + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i$1 ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i$1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i$1 + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i$1 + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( var i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( var j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( var i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( var i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\tTubeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( var j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( var j$1 = 1; j$1 <= tubularSegments; j$1 ++ ) {\n\n\t\t\tfor ( var i$1 = 1; i$1 <= radialSegments; i$1 ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j$1 - 1 ) + ( i$1 - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j$1 + ( i$1 - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j$1 + i$1;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j$1 - 1 ) + i$1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( var i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( var j$1 = 1; j$1 <= radialSegments; j$1 ++ ) {\n\n\t\t\tfor ( var i$1 = 1; i$1 <= tubularSegments; i$1 ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j$1 + i$1 - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j$1 - 1 ) + i$1 - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j$1 - 1 ) + i$1;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j$1 + i$1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) { return start; }\n\t\tif ( ! end ) { end = start; }\n\n\t\tvar p = start,\n\t\t\tagain;\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) { break; }\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) { return; }\n\n\t\t// interlink polygon nodes in z-order\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\n\n\t\tvar stop = ear,\n\t\t\tprev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\tvar p = ear.prevZ,\n\t\t\tn = ear.nextZ;\n\n\t\t// look for points inside the triangle in both directions\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\t// look for remaining points in decreasing z-order\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\t// look for remaining points in increasing z-order\n\t\twhile ( n && n.z <= maxZ ) {\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tvar a = p.prev,\n\t\t\t\tb = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn filterPoints( p );\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [],\n\t\t\ti, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) { list.steiner = true; }\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\n\t\t\t// filter collinear points around the cuts\n\t\t\tfilterPoints( outerNode, outerNode.next );\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) { return null; }\n\n\t\tif ( hx === qx ) { return m; } // hole touches outer segment; pick leftmost endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m;\n\n\t\tdo {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== stop );\n\n\t\treturn m;\n\n\t}\n\n\t// whether sector in vertex m contains sector in vertex p in the same coordinates\n\tfunction sectorContainsSector( m, p ) {\n\n\t\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\t\tinSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) { break; }\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\n\t\t\t\t\telse { list = e; }\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start,\n\t\t\tleftmost = start;\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t\t( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t\t( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\n\t\t\t( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n\t\t\t( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n\t\t\tequals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n\t}\n\n\t// signed area of a triangle\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tvar o1 = sign( area( p1, q1, p2 ) );\n\t\tvar o2 = sign( area( p1, q1, q2 ) );\n\t\tvar o3 = sign( area( p2, q2, p1 ) );\n\t\tvar o4 = sign( area( p2, q2, q1 ) );\n\n\t\tif ( o1 !== o2 && o3 !== o4 ) { return true; } // general case\n\n\t\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) { return true; } // p1, q1 and p2 are collinear and p2 lies on p1q1\n\t\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) { return true; } // p1, q1 and q2 are collinear and q2 lies on p1q1\n\t\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) { return true; } // p2, q2 and p1 are collinear and p1 lies on p2q2\n\t\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) { return true; } // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\n\t}\n\n\t// for collinear points p, q, r, check if point q lies on segment pr\n\tfunction onSegment( p, q, r ) {\n\n\t\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n\t}\n\n\tfunction sign( num ) {\n\n\t\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\t\t{ inside = ! inside; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertex index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertex nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i$1 = 0; i$1 < triangles.length; i$1 += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i$1, i$1 + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tvar ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( var h$1 = 0, hl$1 = holes.length; h$1 < hl$1; h$1 ++ ) {\n\n\t\t\t\tvar ahole$1 = holes[ h$1 ];\n\n\t\t\t\tvertices = vertices.concat( ahole$1 );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [];\n\t\t\tvar oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( var h$2 = 0, hl$2 = holes.length; h$2 < hl$2; h$2 ++ ) {\n\n\t\t\t\tvar ahole$2 = holes[ h$2 ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( var i$1 = 0, il$1 = ahole$2.length, j$1 = il$1 - 1, k$1 = i$1 + 1; i$1 < il$1; i$1 ++, j$1 ++, k$1 ++ ) {\n\n\t\t\t\t\tif ( j$1 === il$1 ) { j$1 = 0; }\n\t\t\t\t\tif ( k$1 === il$1 ) { k$1 = 0; }\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i$1 ] = getBevelVec( ahole$2[ i$1 ], ahole$2[ j$1 ], ahole$2[ k$1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( var b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tvar t = b / bevelSegments;\n\t\t\t\tvar z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tvar bs$1 = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( var i$2 = 0, il$2 = contour.length; i$2 < il$2; i$2 ++ ) {\n\n\t\t\t\t\tvar vert = scalePt2( contour[ i$2 ], contourMovements[ i$2 ], bs$1 );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( var h$3 = 0, hl$3 = holes.length; h$3 < hl$3; h$3 ++ ) {\n\n\t\t\t\t\tvar ahole$3 = holes[ h$3 ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h$3 ];\n\n\t\t\t\t\tfor ( var i$3 = 0, il$3 = ahole$3.length; i$3 < il$3; i$3 ++ ) {\n\n\t\t\t\t\t\tvar vert$1 = scalePt2( ahole$3[ i$3 ], oneHoleMovements[ i$3 ], bs$1 );\n\n\t\t\t\t\t\tv( vert$1.x, vert$1.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( var i$4 = 0; i$4 < vlen; i$4 ++ ) {\n\n\t\t\t\tvar vert$2 = bevelEnabled ? scalePt2( vertices[ i$4 ], verticesMovements[ i$4 ], bs ) : vertices[ i$4 ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert$2.x, vert$2.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert$2.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert$2.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( var s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( var i$5 = 0; i$5 < vlen; i$5 ++ ) {\n\n\t\t\t\t\tvar vert$3 = bevelEnabled ? scalePt2( vertices[ i$5 ], verticesMovements[ i$5 ], bs ) : vertices[ i$5 ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert$3.x, vert$3.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert$3.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert$3.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( var b$1 = bevelSegments - 1; b$1 >= 0; b$1 -- ) {\n\n\t\t\t\tvar t$1 = b$1 / bevelSegments;\n\t\t\t\tvar z$1 = bevelThickness * Math.cos( t$1 * Math.PI / 2 );\n\t\t\t\tvar bs$2 = bevelSize * Math.sin( t$1 * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( var i$6 = 0, il$4 = contour.length; i$6 < il$4; i$6 ++ ) {\n\n\t\t\t\t\tvar vert$4 = scalePt2( contour[ i$6 ], contourMovements[ i$6 ], bs$2 );\n\t\t\t\t\tv( vert$4.x, vert$4.y, depth + z$1 );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( var h$4 = 0, hl$4 = holes.length; h$4 < hl$4; h$4 ++ ) {\n\n\t\t\t\t\tvar ahole$4 = holes[ h$4 ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h$4 ];\n\n\t\t\t\t\tfor ( var i$7 = 0, il$5 = ahole$4.length; i$7 < il$5; i$7 ++ ) {\n\n\t\t\t\t\t\tvar vert$5 = scalePt2( ahole$4[ i$7 ], oneHoleMovements[ i$7 ], bs$2 );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert$5.x, vert$5.y, depth + z$1 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert$5.x, vert$5.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z$1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( var i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( var i$1 = 0; i$1 < flen; i$1 ++ ) {\n\n\t\t\t\t\t\tvar face$1 = faces[ i$1 ];\n\t\t\t\t\t\tf3( face$1[ 0 ] + offset, face$1[ 1 ] + offset, face$1[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( var i$2 = 0; i$2 < flen; i$2 ++ ) {\n\n\t\t\t\t\t\tvar face$2 = faces[ i$2 ];\n\t\t\t\t\t\tf3( face$2[ 2 ], face$2[ 1 ], face$2[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( var i$3 = 0; i$3 < flen; i$3 ++ ) {\n\n\t\t\t\t\t\tvar face$3 = faces[ i$3 ];\n\t\t\t\t\t\tf3( face$3[ 0 ] + vlen * steps, face$3[ 1 ] + vlen * steps, face$3[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tvar ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tvar j = i;\n\t\t\t\t\tvar k = i - 1;\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( var s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tvar uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( var ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( var iy$1 = 0; iy$1 < heightSegments; iy$1 ++ ) {\n\n\t\t\tfor ( var ix$1 = 0; ix$1 < widthSegments; ix$1 ++ ) {\n\n\t\t\t\tvar a = grid[ iy$1 ][ ix$1 + 1 ];\n\t\t\t\tvar b = grid[ iy$1 ][ ix$1 ];\n\t\t\t\tvar c = grid[ iy$1 + 1 ][ ix$1 ];\n\t\t\t\tvar d = grid[ iy$1 + 1 ][ ix$1 + 1 ];\n\n\t\t\t\tif ( iy$1 !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\n\t\t\t\tif ( iy$1 !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( var i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tvar segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( var j$1 = 0; j$1 < phiSegments; j$1 ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j$1 * ( thetaSegments + 1 );\n\n\t\t\tfor ( var i$1 = 0; i$1 < thetaSegments; i$1 ++ ) {\n\n\t\t\t\tvar segment$1 = i$1 + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment$1;\n\t\t\t\tvar b = segment$1 + thetaSegments + 1;\n\t\t\t\tvar c = segment$1 + thetaSegments + 2;\n\t\t\t\tvar d = segment$1 + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( var i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( var j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( var i$1 = 0; i$1 < segments; i$1 ++ ) {\n\n\t\t\tfor ( var j$1 = 0; j$1 < ( points.length - 1 ); j$1 ++ ) {\n\n\t\t\t\tvar base = j$1 + i$1 * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tvar base$1 = segments * points.length * 3;\n\n\t\t\tfor ( var i$2 = 0, j$2 = 0; i$2 < points.length; i$2 ++, j$2 += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j$2 + 0 ];\n\t\t\t\tn1.y = normals[ j$2 + 1 ];\n\t\t\t\tn1.z = normals[ j$2 + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base$1 + j$2 + 0 ];\n\t\t\t\tn2.y = normals[ base$1 + j$2 + 1 ];\n\t\t\t\tn2.z = normals[ base$1 + j$2 + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j$2 + 0 ] = normals[ base$1 + j$2 + 0 ] = n.x;\n\t\t\t\tnormals[ j$2 + 1 ] = normals[ base$1 + j$2 + 1 ] = n.y;\n\t\t\t\tnormals[ j$2 + 2 ] = normals[ base$1 + j$2 + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tvar shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( var i$1 = 0, l$1 = shapeHoles.length; i$1 < l$1; i$1 ++ ) {\n\n\t\t\t\tvar shapeHole$1 = shapeHoles[ i$1 ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole$1 );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( var i$2 = 0, l$2 = shapeVertices.length; i$2 < l$2; i$2 ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i$2 ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( var i$3 = 0, l$3 = faces.length; i$3 < l$3; i$3 ++ ) {\n\n\t\t\t\tvar face = faces[ i$3 ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {};\n\t\tvar edge1, edge2, key;\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( var x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( var x$1 = 0; x$1 < radialSegments; x$1 ++ ) {\n\n\t\t\t\tfor ( var y$1 = 0; y$1 < heightSegments; y$1 ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y$1 ][ x$1 ];\n\t\t\t\t\tvar b = indexArray[ y$1 + 1 ][ x$1 ];\n\t\t\t\t\tvar c = indexArray[ y$1 + 1 ][ x$1 + 1 ];\n\t\t\t\t\tvar d = indexArray[ y$1 ][ x$1 + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( var x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( var x$1 = 0; x$1 <= radialSegments; x$1 ++ ) {\n\n\t\t\t\tvar u = x$1 / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( var x$2 = 0; x$2 < radialSegments; x$2 ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x$2;\n\t\t\t\tvar i = centerIndexEnd + x$2;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( var s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( var i$1 = 1; i$1 <= segments; i$1 ++ ) {\n\n\t\t\tindices.push( i$1, i$1 + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.vertexTangents = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.vertexTangents = source.vertexTangents;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  clearcoat: <float>,\n\t *  clearcoatMap: new THREE.Texture( <Image> ),\n\t *  clearcoatRoughness: <float>,\n\t *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *  clearcoatNormalScale: <Vector2>,\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *  reflectivity: <float>,\n\t *\n\t *  sheen: <Color>,\n\t *\n\t *  transparency: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transparency = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif ( source.sheen ) {\n\n\t\t\tthis.sheen = ( this.sheen || new Color() ).copy( source.sheen );\n\n\t\t} else {\n\n\t\t\tthis.sheen = null;\n\n\t\t}\n\n\t\tthis.transparency = source.transparency;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.MultiplyOperation,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *  gradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( Material.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  matcap: new THREE.Texture( <Image> ),\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) { return; } // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) { return; } // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\n\n\t\t\tfps = fps || 30;\n\n\t\t\tvar clip = sourceClip.clone();\n\n\t\t\tclip.name = name;\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tvar track = clip.tracks[ i ];\n\t\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\n\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\n\n\t\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( times.length === 0 ) { continue; }\n\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\t\ttracks.push( track );\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor ( var i$1 = 0; i$1 < clip.tracks.length; ++ i$1 ) {\n\n\t\t\t\tif ( minStartTime > clip.tracks[ i$1 ].times[ 0 ] ) {\n\n\t\t\t\t\tminStartTime = clip.tracks[ i$1 ].times[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// shift all tracks such that clip begins at t=0\n\n\t\t\tfor ( var i$2 = 0; i$2 < clip.tracks.length; ++ i$2 ) {\n\n\t\t\t\tclip.tracks[ i$2 ].shift( - 1 * minStartTime );\n\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\n\t\t\treturn clip;\n\n\t\t},\n\n\t\tmakeClipAdditive: function ( targetClip, referenceFrame, referenceClip, fps ) {\n\n\t\t\tif ( referenceFrame === undefined ) { referenceFrame = 0; }\n\t\t\tif ( referenceClip === undefined ) { referenceClip = targetClip; }\n\t\t\tif ( fps === undefined || fps <= 0 ) { fps = 30; }\n\n\t\t\tvar numTracks = targetClip.tracks.length;\n\t\t\tvar referenceTime = referenceFrame / fps;\n\n\t\t\t// Make each track's values relative to the values at the reference frame\n\t\t\tvar loop = function ( i ) {\n\n\t\t\t\tvar referenceTrack = referenceClip.tracks[ i ];\n\t\t\t\tvar referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t\t\t// Skip this track if it's non-numeric\n\t\t\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) { return; }\n\n\t\t\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\t\t\tvar targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t\t\t} );\n\n\t\t\t\tif ( targetTrack === undefined ) { return; }\n\n\t\t\t\tvar valueSize = referenceTrack.getValueSize();\n\t\t\t\tvar lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tvar referenceValue = (void 0);\n\n\t\t\t\t// Find the value to subtract out of the track\n\t\t\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, 0, referenceTrack.valueSize );\n\n\t\t\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tvar startIndex = lastIndex * valueSize;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tvar interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\t\t\treferenceValue = interpolant.resultBuffer;\n\n\t\t\t\t}\n\n\t\t\t\t// Conjugate the quaternion\n\t\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t\tvar referenceQuat = new Quaternion(\n\t\t\t\t\t\treferenceValue[ 0 ],\n\t\t\t\t\t\treferenceValue[ 1 ],\n\t\t\t\t\t\treferenceValue[ 2 ],\n\t\t\t\t\t\treferenceValue[ 3 ]\n\t\t\t\t\t).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t\t\t}\n\n\t\t\t\t// Subtract the reference value from all of the track values\n\n\t\t\t\tvar numTimes = targetTrack.times.length;\n\t\t\t\tfor ( var j = 0; j < numTimes; ++ j ) {\n\n\t\t\t\t\tvar valueStart = j * valueSize;\n\n\t\t\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\t\tvalueStart,\n\t\t\t\t\t\t\treferenceValue,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\t\tvalueStart\n\t\t\t\t\t\t);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < numTracks; ++ i ) loop( i );\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\t\t\treturn targetClip;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt$1 = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt$1 ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length;\n\n\t\t\tvar from = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) {\n\n\t\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\t\tfrom = to - 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i$1 = 0, n = values.length; i$1 !== n; ++ i$1 ) {\n\n\t\t\t\t\t\tvar value = values[ i$1 ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i$1, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice( this.times ),\n\t\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tvar writeIndex = 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j$1 = 0; j$1 !== stride; ++ j$1 ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j$1 ] = values[ readOffset + j$1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset$1 = lastIndex * stride, writeOffset$1 = writeIndex * stride, j$2 = 0; j$2 !== stride; ++ j$2 ) {\n\n\t\t\t\t\tvalues[ writeOffset$1 + j$2 ] = values[ readOffset$1 + j$2 ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t} else {\n\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\t\treturn track;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tvar offset = i1 * stride;\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks, blendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\t\tthis.blendMode = ( blendMode !== undefined ) ? blendMode : NormalAnimationBlendMode;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks, json.blendMode );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name$1 in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name$1, animationToMorphTargets[ name$1 ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\tvar fps = animation.fps || 30;\n\t\t\tvar blendMode = animation.blendMode;\n\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tvar k = (void 0);\n\n\t\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m$1 = 0; m$1 !== animationKeys[ k ].morphTargets.length; ++ m$1 ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks, blendMode );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks;\n\t\t\tvar duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks, this.blendMode );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tvar index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tObject.assign( Loader.prototype, {\n\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\t\tloadAsync: function ( url, onProgress ) {\n\n\t\t\tvar scope = this;\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t\t} );\n\n\t\t},\n\n\t\tparse: function ( /* data */ ) {},\n\n\t\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( path ) {\n\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( resourcePath ) {\n\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( requestHeader ) {\n\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FileLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\t\t\tvar request;\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\t\t\t\tdata = decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\trequest = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\n\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i$1 = 0, il$1 = callbacks.length; i$1 < il$1; i$1 ++ ) {\n\n\t\t\t\t\t\t\tvar callback$1 = callbacks[ i$1 ];\n\t\t\t\t\t\t\tif ( callback$1.onError ) { callback$1.onError( event ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\n\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io/\n\t */\n\n\tfunction AnimationLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AnimationLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CompressedTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: DataTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\t\tif ( ! texData ) { return; }\n\n\t\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) { onError( event ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: TextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( var p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t, optionalTarget ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\t\treturn tangent;\n\n\t\t},\n\n\t\tgetTangentAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t, optionalTarget );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( var i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tvar u = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( var i$1 = 1; i$1 <= segments; i$1 ++ ) {\n\n\t\t\t\tnormals[ i$1 ] = normals[ i$1 - 1 ].clone();\n\n\t\t\t\tbinormals[ i$1 ] = binormals[ i$1 - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i$1 - 1 ], tangents[ i$1 ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\tvar theta = Math.acos( MathUtils.clamp( tangents[ i$1 - 1 ].dot( tangents[ i$1 ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i$1 ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i$1 ].crossVectors( tangents[ i$1 ], normals[ i$1 ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\tvar theta$1 = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta$1 /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta$1 = - theta$1;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i$2 = 1; i$2 <= segments; i$2 ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i$2 ].applyMatrix4( mat.makeRotationAxis( tangents[ i$2 ], theta$1 * i$2 ) );\n\t\t\t\t\tbinormals[ i$2 ].crossVectors( tangents[ i$2 ], normals[ i$2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( t, optionalTarget ) {\n\n\t\tvar tangent = optionalTarget || new Vector2();\n\n\t\ttangent.copy( this.v2 ).sub( this.v1 ).normalize();\n\n\t\treturn tangent;\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [];\n\t\t\tvar sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [];\n\t\t\tvar last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\n\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\n\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\t_projScreenMatrix: new Matrix4(),\n\n\t\t_lightPositionWorld: new Vector3(),\n\n\t\t_lookTarget: new Vector3(),\n\n\t\tgetViewportCount: function () {\n\n\t\t\treturn this._viewportCount;\n\n\t\t},\n\n\t\tgetFrustum: function () {\n\n\t\t\treturn this._frustum;\n\n\t\t},\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( lookTarget );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t},\n\n\t\tgetViewport: function ( viewportIndex ) {\n\n\t\t\treturn this._viewports[ viewportIndex ];\n\n\t\t},\n\n\t\tgetFrameExtents: function () {\n\n\t\t\treturn this._frameExtents;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\n\t\t\tif ( this.normalBias !== 0 ) { object.normalBias = this.normalBias; }\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction PointLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: PointLightShadow,\n\n\t\tisPointLightShadow: true,\n\n\t\tupdateMatrices: function ( light, viewportIndex ) {\n\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\n\n\t\t\tvar camera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tcamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.copy( camera.position );\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\t\tcamera.lookAt( lookTarget );\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\n\t\tthis.right = ( right !== undefined ) ? right : 1;\n\t\tthis.top = ( top !== undefined ) ? top : 1;\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow() {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow,\n\n\t\tisDirectionalLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Primary reference:\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\n\t// 3-band SH defined by 9 coefficients\n\n\tfunction SphericalHarmonics3() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tObject.assign( SphericalHarmonics3.prototype, {\n\n\t\tisSphericalHarmonics3: true,\n\n\t\tset: function ( coefficients ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tzero: function () {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\tgetAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t\t// band 1\n\t\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t\t// band 1\n\t\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tadd: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledSH: function ( sh, s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( sh, alpha ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcopy: function ( sh ) {\n\n\t\t\treturn this.set( sh.coefficients );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( SphericalHarmonics3, {\n\n\t\t// evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\t// band 0\n\t\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t\t// band 1\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t\t// band 2\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * A LightProbe is a source of indirect-diffuse light\n\t */\n\n\tfunction LightProbe( sh, intensity ) {\n\n\t\tLight.call( this, undefined, intensity );\n\n\t\tthis.type = 'LightProbe';\n\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n\t}\n\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: LightProbe,\n\n\t\tisLightProbe: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.sh.copy( source.sh );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\t\tthis.sh.fromArray( json.sh );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.sh = this.sh.toArray();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: MaterialLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\n\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\n\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\n\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\n\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\n\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\n\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\n\n\t\t\tif ( json.vertexTangents !== undefined ) { material.vertexTangents = json.vertexTangents; }\n\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\n\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\n\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\n\n\t\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\n\n\t\t\tif ( json.extensions !== undefined ) {\n\n\t\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\n\n\t\t\tif ( json.alphaMap !== undefined ) { material.alphaMap = getTexture( json.alphaMap ); }\n\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\n\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\n\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\n\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\n\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\n\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\n\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\n\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\n\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\n\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\n\n\t\t\tif ( json.clearcoatMap !== undefined ) { material.clearcoatMap = getTexture( json.clearcoatMap ); }\n\t\t\tif ( json.clearcoatRoughnessMap !== undefined ) { material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap ); }\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t\t} catch ( e ) { // see #16358\n\n\t\t\t\treturn s;\n\n\t\t\t}\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) { return './'; }\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.instanceCount = source.instanceCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.instanceCount = this.instanceCount;\n\n\t\t\tdata.isInstancedBufferGeometry = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\t\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ()\t{\n\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\tdata.isInstancedBufferAttribute = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: BufferGeometryLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar interleavedBufferMap = {};\n\t\t\tvar arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) { return interleavedBufferMap[ uuid ]; }\n\n\t\t\t\tvar interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tvar interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\t\tvar buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\t\tvar array = new TYPED_ARRAYS[ interleavedBuffer.type ]( buffer );\n\t\t\t\tvar ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\t\treturn ib;\n\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) { return arrayBufferMap[ uuid ]; }\n\n\t\t\t\tvar arrayBuffers = json.arrayBuffers;\n\t\t\t\tvar arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\t\tvar ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\t\treturn ab;\n\n\t\t\t}\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar bufferAttribute = (void 0);\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tvar interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar typedArray$1 = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray$1, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif ( morphAttributes ) {\n\n\t\t\t\tfor ( var key$1 in morphAttributes ) {\n\n\t\t\t\t\tvar attributeArray = morphAttributes[ key$1 ];\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar attribute$1 = attributeArray[ i ];\n\t\t\t\t\t\tvar bufferAttribute$1 = (void 0);\n\n\t\t\t\t\t\tif ( attribute$1.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar interleavedBuffer$1 = getInterleavedBuffer( json.data, attribute$1.data );\n\t\t\t\t\t\t\tbufferAttribute$1 = new InterleavedBufferAttribute( interleavedBuffer$1, attribute$1.itemSize, attribute$1.offset, attribute$1.normalized );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar typedArray$2 = new TYPED_ARRAYS[ attribute$1.type ]( attribute$1.array );\n\t\t\t\t\t\t\tbufferAttribute$1 = new BufferAttribute( typedArray$2, attribute$1.itemSize, attribute$1.normalized );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attribute$1.name !== undefined ) { bufferAttribute$1.name = attribute$1.name; }\n\t\t\t\t\t\tarray.push( bufferAttribute$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[ key$1 ] = array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i$1 = 0, n = groups.length; i$1 !== n; ++ i$1 ) {\n\n\t\t\t\t\tvar group = groups[ i$1 ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\tif ( json.name ) { geometry.name = json.name; }\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ObjectLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\t\t\tvar geometryShapes;\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry = (void 0);\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j$1 = 0, jl$1 = data.shapes.length; j$1 < jl$1; j$1 ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape$1 = shapes[ data.shapes[ j$1 ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape$1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.' );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar cache = {}; // MultiMaterial\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tvar loader;\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tloader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path$1 = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = (void 0);\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\n\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\n\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\n\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\n\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) { return undefined; }\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tvar geometry, material;\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\n\t\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\n\t\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\n\t\t\t\tif ( data.shadow.normalBias !== undefined ) { object.shadow.normalBias = data.shadow.normalBias; }\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tisImageBitmapLoader: true,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) { onError( e ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) { return []; }\n\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx$1 = 0, sLen$1 = newShapes.length; sIdx$1 < sLen$1; sIdx$1 ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx$1 ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx$1 !== s2Idx )\t{ toChange.push( { froms: sIdx$1, tos: s2Idx, hole: hIdx } ); }\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx$1 ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i$1 = 0, il = newShapes.length; i$1 < il; i$1 ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i$1 ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i$1 ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) { size = 100; }\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) {\n\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FontLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( _context === undefined ) {\n\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn _context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\t_context = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AudioLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( onError ) {\n\n\t\t\t\t\t\tonError( e );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( skyColor );\n\t\tvar color2 = new Color().set( groundColor );\n\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tvar c0 = Math.sqrt( Math.PI );\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: HemisphereLightProbe,\n\n\t\tisHemisphereLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction AmbientLightProbe( color, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: AmbientLightProbe,\n\n\t\tisAmbientLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar _eyeRight = new Matrix4();\n\tvar _eyeLeft = new Matrix4();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar cache = this._cache;\n\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$2 = new Vector3();\n\tvar _quaternion$3 = new Quaternion();\n\tvar _scale$1 = new Vector3();\n\tvar _orientation = new Vector3();\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t// code path for Chrome (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaStreamSource: function ( mediaStream ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) { this.play(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function ( delay ) {\n\n\t\t\tif ( delay === undefined ) { delay = 0; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\tthis.setDetune( this.detune );\n\t\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\t// update current progress\n\n\t\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) { value = []; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDetune: function ( value ) {\n\n\t\t\tthis.detune = value;\n\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDetune: function () {\n\n\t\t\treturn this.detune;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopStart: function ( value ) {\n\n\t\t\tthis.loopStart = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopEnd: function ( value ) {\n\n\t\t\tthis.loopEnd = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$3 = new Vector3();\n\tvar _quaternion$4 = new Quaternion();\n\tvar _scale$2 = new Vector3();\n\tvar _orientation$1 = new Vector3();\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\n\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif ( panner.positionX ) {\n\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0;\n\t\t\tvar data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride;\n\n\t\t\tvar currentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// accumulate data in the 'incoming' region into 'add'\n\t\taccumulateAdditive: function ( weight ) {\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t\t// add = identity\n\n\t\t\t\tthis._setIdentity();\n\n\t\t\t}\n\n\t\t\t// add := add + incoming * weight\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t\t// accuN := accuN + additive accuN\n\n\t\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\t// Add to identity for additive\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\t\t_setAdditiveIdentityNumeric: function () {\n\n\t\t\tvar startIndex = this._addIndex * this.valueSize;\n\t\t\tvar endIndex = startIndex + this.valueSize;\n\n\t\t\tfor ( var i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\t\tthis.buffer[ i ] = 0;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_setAdditiveIdentityQuaternion: function () {\n\n\t\t\tthis._setAdditiveIdentityNumeric();\n\t\t\tthis.buffer[ this._addIndex * 4 + 3 ] = 1;\n\n\t\t},\n\n\t\t_setAdditiveIdentityOther: function () {\n\n\t\t\tvar startIndex = this._origIndex * this.valueSize;\n\t\t\tvar targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor ( var i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t\t}\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_slerpAdditive: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar workOffset = this._workIndex * stride;\n\n\t\t\t// Store result in intermediate buffer offset\n\t\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t\t// Slerp to the intermediate result\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lerpAdditive: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n\t// Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n\t// Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n\tvar _trackRe = new RegExp( ''\n\t\t+ '^'\n\t\t+ _directoryRe\n\t\t+ _nodeRe\n\t\t+ _objectRe\n\t\t+ _propertyRe\n\t\t+ '$'\n\t);\n\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t\t},\n\n\t\tparseTrackName: function ( trackName ) {\n\n\t\t\tvar matches = _trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t},\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) { return result; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *  - Add objects you would otherwise pass as 'root' to the\n\t *    constructor or the .clipAction method of AnimationMixer.\n\t *\n\t *  - Instead pass this object as 'root'.\n\t *\n\t *  - You can also add and remove objects later when the mixer\n\t *    is running.\n\t *\n\t * Note:\n\t *\n\t *    Objects of this class appear as one object to the mixer,\n\t *    so cache control of the individual objects must be done\n\t *    on the group.\n\t *\n\t * Limitation:\n\t *\n\t *  - The animated properties must be compatible among the\n\t *    all objects in the group.\n\t *\n\t *  - A single property can either be controlled through a\n\t *    target group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tvar knownObject = undefined,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tvar index = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j$1 = 0, m$1 = nBindings; j$1 !== m$1; ++ j$1 ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j$1 ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\t\tvar binding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j$1 ], parsedPaths[ j$1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tvar nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tvar nCachedObjects = this.nCachedObjects_,\n\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex$1 = -- nObjects,\n\t\t\t\t\t\t\tlastObject$1 = objects[ lastIndex$1 ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject$1.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject$1;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j$1 = 0, m$1 = nBindings; j$1 !== m$1; ++ j$1 ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath$1 = bindings[ j$1 ];\n\n\t\t\t\t\t\t\tbindingsForPath$1[ index ] = bindingsForPath$1[ lastIndex$1 ];\n\t\t\t\t\t\t\tbindingsForPath$1.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot, blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\t\tthis.blendMode = blendMode || clip.blendMode;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0; // restart clip\n\t\t\tthis._loopCount = - 1;// forget previous loops\n\t\t\tthis._startTime = null;// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer,\n\t\t\t\tnow = mixer.time,\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tfor ( var j$1 = 0, m$1 = interpolants.length; j$1 !== m$1; ++ j$1 ) {\n\n\t\t\t\t\t\t\tinterpolants[ j$1 ].evaluate( clipTime );\n\t\t\t\t\t\t\tpropertyMixers[ j$1 ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\n\t\t\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\t\tvar bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name;\n\n\t\t\t\tvar binding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tvar actionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tvar bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\t\tvar interpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot, blendMode ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid;\n\n\t\t\tvar clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\t\tvar clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\t\tvar actionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( blendMode === undefined ) {\n\n\t\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) { return null; }\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor ( var i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\t\tactions[ i ].stop();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i$1 = 0; i$1 !== nBindings; ++ i$1 ) {\n\n\t\t\t\tbindings[ i$1 ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function ( timeInSeconds ) {\n\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t\t}\n\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function ( data ) {\n\n\t\t\tvar ib = InterleavedBuffer.prototype.clone.call( this, data );\n\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\treturn ib;\n\n\t\t},\n\n\t\ttoJSON: function ( data ) {\n\n\t\t\tvar json = InterleavedBuffer.prototype.toJSON.call( this, data );\n\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\t\tobject.raycast( raycaster, intersects );\n\n\t\t}\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector$7 = new Vector2();\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _startP = new Vector3();\n\tvar _startEnd = new Vector3();\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\n\n\t\t\t_startP.subVectors( point, this.start );\n\t\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = MathUtils.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t\tthis.hasPositions = false;\n\t\tthis.hasNormals = false;\n\t\tthis.hasColors = false;\n\t\tthis.hasUvs = false;\n\n\t\tthis.positionArray = null;\n\t\tthis.normalArray = null;\n\t\tthis.colorArray = null;\n\t\tthis.uvArray = null;\n\n\t\tthis.count = 0;\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector$8 = new Vector3();\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$8 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$9 = new Vector3();\n\tvar _boneMatrix = new Matrix4();\n\tvar _matrixWorldInv = new Matrix4();\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.type = 'SkeletonHelper';\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.isSkeletonHelper = true;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tconst d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$a = new Vector3();\n\tvar _color1 = new Color();\n\tvar _color2 = new Color();\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) { this.material.vertexColors = true; }\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\t\tconstructor: GridHelper,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\t\tthis.geometry.copy( source.geometry );\n\t\t\tthis.material.copy( source.material );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\t// create the radials\n\n\t\tfor ( var i = 0; i <= radials; i ++ ) {\n\n\t\t\tvar v = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tvar x = Math.sin( v ) * radius;\n\t\t\tvar z = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tvar color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( var i$1 = 0; i$1 <= circles; i$1 ++ ) {\n\n\t\t\tvar color$1 = ( i$1 & 1 ) ? color1 : color2;\n\n\t\t\tvar r = radius - ( radius / circles * i$1 );\n\n\t\t\tfor ( var j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tvar v$1 = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tvar x$1 = Math.sin( v$1 ) * r;\n\t\t\t\tvar z$1 = Math.cos( v$1 ) * r;\n\n\t\t\t\tvertices.push( x$1, 0, z$1 );\n\t\t\t\tcolors.push( color$1.r, color$1.g, color$1.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv$1 = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx$1 = Math.sin( v$1 ) * r;\n\t\t\t\tz$1 = Math.cos( v$1 ) * r;\n\n\t\t\t\tvertices.push( x$1, 0, z$1 );\n\t\t\t\tcolors.push( color$1.r, color$1.g, color$1.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$5 = new Vector3();\n\tvar _v2$3 = new Vector3();\n\tvar _v3$1 = new Vector3();\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) { size = 1; }\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\t_v1$5.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3$1.subVectors( _v2$3, _v1$5 );\n\n\t\tthis.lightPlane.lookAt( _v2$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2$3 );\n\t\tthis.targetLine.scale.z = _v3$1.length();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tvar _vector$b = new Vector3();\n\tvar _camera = new Camera();\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar pointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t\t_vector$b.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tvar _box$3 = new Box3();\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = function ( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box$3.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box$3.isEmpty() ) { return; }\n\n\t\tvar min = _box$3.min;\n\t\tvar max = _box$3.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t};\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.copy = function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, color ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tcolor = color || 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) { return; }\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar _axis = new Vector3();\n\tvar _lineGeometry, _coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\n\t\tif ( length === undefined ) { length = 1; }\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tvar radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t};\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t};\n\n\tArrowHelper.prototype.copy = function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t};\n\n\tArrowHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author Emmett Lalish / elalish\n\t *\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow( 2, LOD_MAX );\n\n\t// The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\tvar EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\t// The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\tvar MAX_SAMPLES = 20;\n\n\tvar ENCODINGS = {};\n\tENCODINGS[ LinearEncoding ] = 0;\n\tENCODINGS[ sRGBEncoding ] = 1;\n\tENCODINGS[ RGBEEncoding ] = 2;\n\tENCODINGS[ RGBM7Encoding ] = 3;\n\tENCODINGS[ RGBM16Encoding ] = 4;\n\tENCODINGS[ RGBDEncoding ] = 5;\n\tENCODINGS[ GammaEncoding ] = 6;\n\n\tvar _flatCamera = new OrthographicCamera();\n\tvar ref = _createPlanes();\n\tvar _lodPlanes = ref._lodPlanes;\n\tvar _sizeLods = ref._sizeLods;\n\tvar _sigmas = ref._sigmas;\n\tvar _oldTarget = null;\n\n\t// Golden Ratio\n\tvar PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar INV_PHI = 1 / PHI;\n\n\t// Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\tvar _axisDirections = [\n\t\tnew Vector3( 1, 1, 1 ),\n\t\tnew Vector3( - 1, 1, 1 ),\n\t\tnew Vector3( 1, 1, - 1 ),\n\t\tnew Vector3( - 1, 1, - 1 ),\n\t\tnew Vector3( 0, PHI, INV_PHI ),\n\t\tnew Vector3( 0, PHI, - INV_PHI ),\n\t\tnew Vector3( INV_PHI, 0, PHI ),\n\t\tnew Vector3( - INV_PHI, 0, PHI ),\n\t\tnew Vector3( PHI, INV_PHI, 0 ),\n\t\tnew Vector3( - PHI, INV_PHI, 0 ) ];\n\n\tfunction PMREMGenerator( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._blurMaterial = _getBlurShader( MAX_SAMPLES );\n\t\tthis._equirectShader = null;\n\t\tthis._cubemapShader = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\tPMREMGenerator.prototype = {\n\n\t\tconstructor: PMREMGenerator,\n\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\t\tfromScene: function ( scene, sigma, near, far ) {\n\t\t\tif ( sigma === void 0 ) sigma = 0;\n\t\t\tif ( near === void 0 ) near = 0.1;\n\t\t\tif ( far === void 0 ) far = 100;\n\n\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\t\tif ( sigma > 0 ) {\n\n\t\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t\t}\n\n\t\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromEquirectangular: function ( equirectangular ) {\n\n\t\t\treturn this._fromTexture( equirectangular );\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromCubemap: function ( cubemap ) {\n\n\t\t\treturn this._fromTexture( cubemap );\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileCubemapShader: function () {\n\n\t\t\tif ( this._cubemapShader === null ) {\n\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\tthis._compileMaterial( this._cubemapShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileEquirectangularShader: function () {\n\n\t\t\tif ( this._equirectShader === null ) {\n\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\tthis._compileMaterial( this._equirectShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\tdispose: function () {\n\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif ( this._cubemapShader !== null ) { this._cubemapShader.dispose(); }\n\t\t\tif ( this._equirectShader !== null ) { this._equirectShader.dispose(); }\n\n\t\t\tfor ( var i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t\t}\n\n\t\t},\n\n\t\t// private interface\n\n\t\t_cleanup: function ( outputTarget ) {\n\n\t\t\tthis._pingPongRenderTarget.dispose();\n\t\t\tthis._renderer.setRenderTarget( _oldTarget );\n\t\t\toutputTarget.scissorTest = false;\n\t\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t\t},\n\n\t\t_fromTexture: function ( texture ) {\n\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets( texture );\n\t\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t_allocateTargets: function ( texture ) { // warning: null texture is valid\n\n\t\t\tvar params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR( texture ) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false,\n\t\t\t\tstencilBuffer: false\n\t\t\t};\n\n\t\t\tvar cubeUVRenderTarget = _createRenderTarget( params );\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( params );\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t_compileMaterial: function ( material ) {\n\n\t\t\tvar tmpMesh = new Mesh( _lodPlanes[ 0 ], material );\n\t\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t\t},\n\n\t\t_sceneToCubeUV: function ( scene, near, far, cubeUVRenderTarget ) {\n\n\t\t\tvar fov = 90;\n\t\t\tvar aspect = 1;\n\t\t\tvar cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\t\tvar upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\t\tvar forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\t\tvar renderer = this._renderer;\n\n\t\t\tvar outputEncoding = renderer.outputEncoding;\n\t\t\tvar toneMapping = renderer.toneMapping;\n\t\t\tvar clearColor = renderer.getClearColor();\n\t\t\tvar clearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\n\t\t\tvar background = scene.background;\n\t\t\tif ( background && background.isColor ) {\n\n\t\t\t\tbackground.convertSRGBToLinear();\n\t\t\t\t// Convert linear to RGBE\n\t\t\t\tvar maxComponent = Math.max( background.r, background.g, background.b );\n\t\t\t\tvar fExp = Math.min( Math.max( Math.ceil( Math.log2( maxComponent ) ), - 128.0 ), 127.0 );\n\t\t\t\tbackground = background.multiplyScalar( Math.pow( 2.0, - fExp ) );\n\t\t\t\tvar alpha = ( fExp + 128.0 ) / 255.0;\n\t\t\t\trenderer.setClearColor( background, alpha );\n\t\t\t\tscene.background = null;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar col = i % 3;\n\t\t\t\tif ( col == 0 ) {\n\n\t\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.setClearColor( clearColor, clearAlpha );\n\n\t\t},\n\n\t\t_textureToCubeUV: function ( texture, cubeUVRenderTarget ) {\n\n\t\t\tvar renderer = this._renderer;\n\n\t\t\tif ( texture.isCubeTexture ) {\n\n\t\t\t\tif ( this._cubemapShader == null ) {\n\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( this._equirectShader == null ) {\n\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tvar mesh = new Mesh( _lodPlanes[ 0 ], material );\n\n\t\t\tvar uniforms = material.uniforms;\n\n\t\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\t\tif ( ! texture.isCubeTexture ) {\n\n\t\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t\t}\n\n\t\t\tuniforms[ 'inputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\t\t\tuniforms[ 'outputEncoding' ].value = ENCODINGS[ cubeUVRenderTarget.texture.encoding ];\n\n\t\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\t\trenderer.render( mesh, _flatCamera );\n\n\t\t},\n\n\t\t_applyPMREM: function ( cubeUVRenderTarget ) {\n\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor ( var i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\t\tvar sigma = Math.sqrt( _sigmas[ i ] * _sigmas[ i ] - _sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\n\t\t\t\tvar poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\n\t\t},\n\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\t\t_blur: function ( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\t\tvar pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(\n\t\t\t\tcubeUVRenderTarget,\n\t\t\t\tpingPongRenderTarget,\n\t\t\t\tlodIn,\n\t\t\t\tlodOut,\n\t\t\t\tsigma,\n\t\t\t\t'latitudinal',\n\t\t\t\tpoleAxis );\n\n\t\t\tthis._halfBlur(\n\t\t\t\tpingPongRenderTarget,\n\t\t\t\tcubeUVRenderTarget,\n\t\t\t\tlodOut,\n\t\t\t\tlodOut,\n\t\t\t\tsigma,\n\t\t\t\t'longitudinal',\n\t\t\t\tpoleAxis );\n\n\t\t},\n\n\t\t_halfBlur: function ( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar blurMaterial = this._blurMaterial;\n\n\t\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\t\tconsole.error(\n\t\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t\t}\n\n\t\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\t\tvar STANDARD_DEVIATIONS = 3;\n\n\t\t\tvar blurMesh = new Mesh( _lodPlanes[ lodOut ], blurMaterial );\n\t\t\tvar blurUniforms = blurMaterial.uniforms;\n\n\t\t\tvar pixels = _sizeLods[ lodIn ] - 1;\n\t\t\tvar radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tvar samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\t\tconsole.warn( (\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES) );\n\n\t\t\t}\n\n\t\t\tvar weights = [];\n\t\t\tvar sum = 0;\n\n\t\t\tfor ( var i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\t\tvar x$1 = i / sigmaPixels;\n\t\t\t\tvar weight = Math.exp( - x$1 * x$1 / 2 );\n\t\t\t\tweights.push( weight );\n\n\t\t\t\tif ( i == 0 ) {\n\n\t\t\t\t\tsum += weight;\n\n\t\t\t\t} else if ( i < samples ) {\n\n\t\t\t\t\tsum += 2 * weight;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i$1 = 0; i$1 < weights.length; i$1 ++ ) {\n\n\t\t\t\tweights[ i$1 ] = weights[ i$1 ] / sum;\n\n\t\t\t}\n\n\t\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\t\tblurUniforms[ 'samples' ].value = samples;\n\t\t\tblurUniforms[ 'weights' ].value = weights;\n\t\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\t\tif ( poleAxis ) {\n\n\t\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t\t}\n\n\t\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms[ 'inputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\t\t\tblurUniforms[ 'outputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\n\t\t\tvar outputSize = _sizeLods[ lodOut ];\n\t\t\tvar x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\t\tvar y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) + 2 * outputSize * ( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\t\trenderer.setRenderTarget( targetOut );\n\t\t\trenderer.render( blurMesh, _flatCamera );\n\n\t\t}\n\n\t};\n\n\tfunction _isLDR( texture ) {\n\n\t\tif ( texture === undefined || texture.type !== UnsignedByteType ) { return false; }\n\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\n\t}\n\n\tfunction _createPlanes() {\n\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\n\t\tvar lod = LOD_MAX;\n\n\t\tfor ( var i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sizeLod = Math.pow( 2, lod );\n\t\t\t_sizeLods.push( sizeLod );\n\t\t\tvar sigma = 1.0 / sizeLod;\n\n\t\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t\t} else if ( i == 0 ) {\n\n\t\t\t\tsigma = 0;\n\n\t\t\t}\n\n\t\t\t_sigmas.push( sigma );\n\n\t\t\tvar texelSize = 1.0 / ( sizeLod - 1 );\n\t\t\tvar min = - texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\n\t\t\tvar position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\t\tvar uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\t\tvar faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\t\tfor ( var face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\t\tvar x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : - 1;\n\t\t\t\tvar coordinates = [\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y + 1, 0\n\t\t\t\t];\n\t\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\t\tvar fill = [ face, face, face, face, face, face ];\n\t\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t\t}\n\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t\t_lodPlanes.push( planes );\n\n\t\t\tif ( lod > LOD_MIN ) {\n\n\t\t\t\tlod --;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { _lodPlanes: _lodPlanes, _sizeLods: _sizeLods, _sigmas: _sigmas };\n\n\t}\n\n\tfunction _createRenderTarget( params ) {\n\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _setViewport( target, x, y, width, height ) {\n\n\t\ttarget.viewport.set( x, y, width, height );\n\t\ttarget.scissor.set( x, y, width, height );\n\n\t}\n\n\tfunction _getBlurShader( maxSamples ) {\n\n\t\tvar weights = new Float32Array( maxSamples );\n\t\tvar poleAxis = new Vector3( 0, 1, 0 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tname: 'SphericalGaussianBlur',\n\n\t\t\tdefines: { 'n': maxSamples },\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'samples': { value: 1 },\n\t\t\t\t'weights': { value: weights },\n\t\t\t\t'latitudinal': { value: false },\n\t\t\t\t'dTheta': { value: 0 },\n\t\t\t\t'mipInt': { value: 0 },\n\t\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform int samples;\\nuniform float weights[n];\\nuniform bool latitudinal;\\nuniform float dTheta;\\nuniform float mipInt;\\nuniform vec3 poleAxis;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define ENVMAP_TYPE_CUBE_UV\\n#include <cube_uv_reflection_fragment>\\n\\nvec3 getSample(float theta, vec3 axis) {\\n\\tfloat cosTheta = cos(theta);\\n\\t// Rodrigues' axis-angle rotation\\n\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t+ cross(axis, vOutputDirection) * sin(theta)\\n\\t\\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\\n\\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\\n}\\n\\nvoid main() {\\n\\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\\n\\tif (all(equal(axis, vec3(0.0))))\\n\\t\\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\\n\\taxis = normalize(axis);\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\\n\\tfor (int i = 1; i < n; i++) {\\n\\t\\tif (i >= samples)\\n\\t\\t\\tbreak;\\n\\t\\tfloat theta = dTheta * float(i);\\n\\t\\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\\n\\t\\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\\n\\t}\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getEquirectShader() {\n\n\t\tvar texelSize = new Vector2( 1, 1 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tname: 'EquirectangularToCubeUV',\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'texelSize': { value: texelSize },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform vec2 texelSize;\\n\\n\" + (_getEncodings()) + \"\\n\\n#include <common>\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tvec3 outputDirection = normalize(vOutputDirection);\\n\\tvec2 uv = equirectUv( outputDirection );\\n\\tvec2 f = fract(uv / texelSize - 0.5);\\n\\tuv -= f * texelSize;\\n\\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x += texelSize.x;\\n\\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.y += texelSize.y;\\n\\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x -= texelSize.x;\\n\\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tvec3 tm = mix(tl, tr, f.x);\\n\\tvec3 bm = mix(bl, br, f.x);\\n\\tgl_FragColor.rgb = mix(tm, bm, f.y);\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCubemapShader() {\n\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tname: 'CubemapToCubeUV',\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform samplerCube envMap;\\n\\n\" + (_getEncodings()) + \"\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCommonVertexShader() {\n\n\t\treturn \"\\nprecision mediump float;\\nprecision mediump int;\\nattribute vec3 position;\\nattribute vec2 uv;\\nattribute float faceIndex;\\nvarying vec3 vOutputDirection;\\n\\n// RH coordinate system; PMREM face-indexing convention\\nvec3 getDirection(vec2 uv, float face) {\\n\\tuv = 2.0 * uv - 1.0;\\n\\tvec3 direction = vec3(uv, 1.0);\\n\\tif (face == 0.0) {\\n\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\t} else if (face == 1.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\t} else if (face == 2.0) {\\n\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\t} else if (face == 3.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\t} else if (face == 4.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\t} else if (face == 5.0) {\\n\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\t}\\n\\treturn direction;\\n}\\n\\nvoid main() {\\n\\tvOutputDirection = getDirection(uv, faceIndex);\\n\\tgl_Position = vec4( position, 1.0 );\\n}\\n\\t\";\n\n\t}\n\n\tfunction _getEncodings() {\n\n\t\treturn \"\\nuniform int inputEncoding;\\nuniform int outputEncoding;\\n\\n#include <encodings_pars_fragment>\\n\\nvec4 inputTexelToLinear(vec4 value){\\n\\tif(inputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(inputEncoding == 1){\\n\\t\\treturn sRGBToLinear(value);\\n\\t}else if(inputEncoding == 2){\\n\\t\\treturn RGBEToLinear(value);\\n\\t}else if(inputEncoding == 3){\\n\\t\\treturn RGBMToLinear(value, 7.0);\\n\\t}else if(inputEncoding == 4){\\n\\t\\treturn RGBMToLinear(value, 16.0);\\n\\t}else if(inputEncoding == 5){\\n\\t\\treturn RGBDToLinear(value, 256.0);\\n\\t}else{\\n\\t\\treturn GammaToLinear(value, 2.2);\\n\\t}\\n}\\n\\nvec4 linearToOutputTexel(vec4 value){\\n\\tif(outputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(outputEncoding == 1){\\n\\t\\treturn LinearTosRGB(value);\\n\\t}else if(outputEncoding == 2){\\n\\t\\treturn LinearToRGBE(value);\\n\\t}else if(outputEncoding == 3){\\n\\t\\treturn LinearToRGBM(value, 7.0);\\n\\t}else if(outputEncoding == 4){\\n\\t\\treturn LinearToRGBM(value, 16.0);\\n\\t}else if(outputEncoding == 5){\\n\\t\\treturn LinearToRGBD(value, 256.0);\\n\\t}else{\\n\\t\\treturn LinearToGamma(value, 2.2);\\n\\t}\\n}\\n\\nvec4 envMapTexelToLinear(vec4 color) {\\n\\treturn inputTexelToLinear(color);\\n}\\n\\t\";\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) { materials = []; }\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\treturn this.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tLoader.Handlers = {\n\n\t\tadd: function ( /* regex, loader */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t\t},\n\n\t\tget: function ( /* file */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t\t}\n\n\t};\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\t\treturn this.setResourcePath( value );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\n\t} );\n\n\tFrustum.prototype.setFromMatrix = function ( m ) {\n\n\t\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\t\treturn this.setFromProjectionMatrix( m );\n\n\t};\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( MathUtils, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn MathUtils.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn MathUtils.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix3( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix4( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( Mesh.prototype, {\n\n\t\tsetDrawMode: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( Mesh.prototype, {\n\n\t\tdrawMode: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\t\treturn TrianglesDrawMode;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tSkinnedMesh.prototype.initBones = function () {\n\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n\t};\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\treturn this.setAttribute( name, attribute );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t},\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\t\t\treturn this.deleteAttribute( name );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InstancedBufferGeometry.prototype, {\n\n\t\tmaxInstancedCount: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.' );\n\t\t\t\treturn this.instanceCount;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.' );\n\t\t\t\tthis.instanceCount = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Raycaster.prototype, {\n\n\t\tlinePrecision: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\treturn this.params.Line.threshold;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\tthis.params.Line.threshold = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InterleavedBuffer.prototype, {\n\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( value );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\toverdraw: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t},\n\n\t\tstencilMask: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\treturn this.stencilFuncMask;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\tthis.stencilFuncMask = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t},\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t},\n\t\tallocTextureUnit: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t\t},\n\t\tsetTexture: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t\t},\n\t\tsetTexture2D: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t\t},\n\t\tsetTextureCube: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t\t},\n\t\tgetActiveMipMapLevel: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\t\treturn this.getActiveMipmapLevel();\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\t\treturn this.getContext();\n\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\t\treturn this.xr;\n\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\t\t\t\treturn 1.0;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\t\treturn new WebGLCubeRenderTarget( width, options );\n\n\t}\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Audio.prototype, {\n\n\t\tload: {\n\t\t\tvalue: function ( file ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\t\t\tscope.setBuffer( buffer );\n\n\t\t\t\t} );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n\t}\n\n\t//\n\n\tfunction JSONLoader() {\n\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );\n\n\t}\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\t\trevision: REVISION,\n\t\t} } ) );\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.LightShadow = LightShadow;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}